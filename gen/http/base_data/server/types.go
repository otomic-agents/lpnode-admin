// Code generated by goa v3.11.0, DO NOT EDIT.
//
// baseData HTTP server types
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	basedata "admin-panel/gen/base_data"

	goa "goa.design/goa/v3/pkg"
)

// GetWalletAndTokensRequestBody is the type of the "baseData" service
// "getWalletAndTokens" endpoint HTTP request body.
type GetWalletAndTokensRequestBody struct {
	// Chain ID
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
}

// ChainDataListResponseBody is the type of the "baseData" service
// "chainDataList" endpoint HTTP response body.
type ChainDataListResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// list
	Result  []*ChainDataItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                      `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetLpInfoResponseBody is the type of the "baseData" service "getLpInfo"
// endpoint HTTP response body.
type GetLpInfoResponseBody struct {
	Code    *int64              `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	Result  *LpInfoResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string             `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// RunTimeEnvResponseBody is the type of the "baseData" service "runTimeEnv"
// endpoint HTTP response body.
type RunTimeEnvResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// list
	Result  *string `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetWalletAndTokensResponseBody is the type of the "baseData" service
// "getWalletAndTokens" endpoint HTTP response body.
type GetWalletAndTokensResponseBody struct {
	// response code
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// wallet list with tokens
	Result []*WalletItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	// response message
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ChainDataItemResponseBody is used to define fields on response body types.
type ChainDataItemResponseBody struct {
	// Chain ID in the database
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Chain ID
	ChainID *int64 `form:"chainId,omitempty" json:"chainId,omitempty" xml:"chainId,omitempty"`
	// chain name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// full chain name
	ChainName *string `form:"chainName,omitempty" json:"chainName,omitempty" xml:"chainName,omitempty"`
	// token name
	TokenName *string `form:"tokenName,omitempty" json:"tokenName,omitempty" xml:"tokenName,omitempty"`
}

// LpInfoResponseBody is used to define fields on response body types.
type LpInfoResponseBody struct {
	Name    *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	Profile *string `form:"profile,omitempty" json:"profile,omitempty" xml:"profile,omitempty"`
}

// WalletItemResponseBody is used to define fields on response body types.
type WalletItemResponseBody struct {
	// wallet name
	WalletName *string `form:"wallet_name,omitempty" json:"wallet_name,omitempty" xml:"wallet_name,omitempty"`
	// wallet address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// whether can sign
	CanSign *bool `form:"can_sign,omitempty" json:"can_sign,omitempty" xml:"can_sign,omitempty"`
	// whether can sign 712
	CanSign712 *bool `form:"can_sign_712,omitempty" json:"can_sign_712,omitempty" xml:"can_sign_712,omitempty"`
	// wallet type
	Type *string `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// signature service address
	SignatureServiceAddress *string `form:"signature_service_address,omitempty" json:"signature_service_address,omitempty" xml:"signature_service_address,omitempty"`
	// token list
	Tokens []*WalletTokenItemResponseBody `form:"tokens,omitempty" json:"tokens,omitempty" xml:"tokens,omitempty"`
}

// WalletTokenItemResponseBody is used to define fields on response body types.
type WalletTokenItemResponseBody struct {
	// token address
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// token symbol
	Symbol *string `form:"symbol,omitempty" json:"symbol,omitempty" xml:"symbol,omitempty"`
	// token decimals
	Decimals *int32 `form:"decimals,omitempty" json:"decimals,omitempty" xml:"decimals,omitempty"`
}

// NewChainDataListResponseBody builds the HTTP response body from the result
// of the "chainDataList" endpoint of the "baseData" service.
func NewChainDataListResponseBody(res *basedata.ChainDataListResult) *ChainDataListResponseBody {
	body := &ChainDataListResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = make([]*ChainDataItemResponseBody, len(res.Result))
		for i, val := range res.Result {
			body.Result[i] = marshalBasedataChainDataItemToChainDataItemResponseBody(val)
		}
	}
	return body
}

// NewGetLpInfoResponseBody builds the HTTP response body from the result of
// the "getLpInfo" endpoint of the "baseData" service.
func NewGetLpInfoResponseBody(res *basedata.GetLpInfoResult) *GetLpInfoResponseBody {
	body := &GetLpInfoResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = marshalBasedataLpInfoToLpInfoResponseBody(res.Result)
	}
	return body
}

// NewRunTimeEnvResponseBody builds the HTTP response body from the result of
// the "runTimeEnv" endpoint of the "baseData" service.
func NewRunTimeEnvResponseBody(res *basedata.RunTimeEnvResult) *RunTimeEnvResponseBody {
	body := &RunTimeEnvResponseBody{
		Code:    res.Code,
		Result:  res.Result,
		Message: res.Message,
	}
	return body
}

// NewGetWalletAndTokensResponseBody builds the HTTP response body from the
// result of the "getWalletAndTokens" endpoint of the "baseData" service.
func NewGetWalletAndTokensResponseBody(res *basedata.GetWalletAndTokensResult) *GetWalletAndTokensResponseBody {
	body := &GetWalletAndTokensResponseBody{
		Code:    res.Code,
		Message: res.Message,
	}
	if res.Result != nil {
		body.Result = make([]*WalletItemResponseBody, len(res.Result))
		for i, val := range res.Result {
			body.Result[i] = marshalBasedataWalletItemToWalletItemResponseBody(val)
		}
	}
	return body
}

// NewGetWalletAndTokensPayload builds a baseData service getWalletAndTokens
// endpoint payload.
func NewGetWalletAndTokensPayload(body *GetWalletAndTokensRequestBody) *basedata.GetWalletAndTokensPayload {
	v := &basedata.GetWalletAndTokensPayload{
		ChainID: *body.ChainID,
	}

	return v
}

// ValidateGetWalletAndTokensRequestBody runs the validations defined on
// GetWalletAndTokensRequestBody
func ValidateGetWalletAndTokensRequestBody(body *GetWalletAndTokensRequestBody) (err error) {
	if body.ChainID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("chainId", "body"))
	}
	return
}
