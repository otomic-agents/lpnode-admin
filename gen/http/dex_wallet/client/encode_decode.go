// Code generated by goa v3.11.0, DO NOT EDIT.
//
// dexWallet HTTP client encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	dexwallet "admin-panel/gen/dex_wallet"
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	goahttp "goa.design/goa/v3/http"
)

// BuildListDexWalletRequest instantiates a HTTP request object with method and
// path set to call the "dexWallet" service "listDexWallet" endpoint
func (c *Client) BuildListDexWalletRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListDexWalletDexWalletPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("dexWallet", "listDexWallet", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListDexWalletResponse returns a decoder for responses returned by the
// dexWallet listDexWallet endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeListDexWalletResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListDexWalletResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("dexWallet", "listDexWallet", err)
			}
			err = ValidateListDexWalletResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("dexWallet", "listDexWallet", err)
			}
			res := NewListDexWalletResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("dexWallet", "listDexWallet", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateDexWalletRequest instantiates a HTTP request object with method
// and path set to call the "dexWallet" service "createDexWallet" endpoint
func (c *Client) BuildCreateDexWalletRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateDexWalletDexWalletPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("dexWallet", "createDexWallet", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateDexWalletRequest returns an encoder for requests sent to the
// dexWallet createDexWallet server.
func EncodeCreateDexWalletRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*dexwallet.WalletRow)
		if !ok {
			return goahttp.ErrInvalidType("dexWallet", "createDexWallet", "*dexwallet.WalletRow", v)
		}
		body := NewCreateDexWalletRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("dexWallet", "createDexWallet", err)
		}
		return nil
	}
}

// DecodeCreateDexWalletResponse returns a decoder for responses returned by
// the dexWallet createDexWallet endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeCreateDexWalletResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CreateDexWalletResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("dexWallet", "createDexWallet", err)
			}
			res := NewCreateDexWalletResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("dexWallet", "createDexWallet", resp.StatusCode, string(body))
		}
	}
}

// BuildDeleteDexWalletRequest instantiates a HTTP request object with method
// and path set to call the "dexWallet" service "deleteDexWallet" endpoint
func (c *Client) BuildDeleteDexWalletRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: DeleteDexWalletDexWalletPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("dexWallet", "deleteDexWallet", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeDeleteDexWalletRequest returns an encoder for requests sent to the
// dexWallet deleteDexWallet server.
func EncodeDeleteDexWalletRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*dexwallet.DeleteFilter)
		if !ok {
			return goahttp.ErrInvalidType("dexWallet", "deleteDexWallet", "*dexwallet.DeleteFilter", v)
		}
		body := NewDeleteDexWalletRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("dexWallet", "deleteDexWallet", err)
		}
		return nil
	}
}

// DecodeDeleteDexWalletResponse returns a decoder for responses returned by
// the dexWallet deleteDexWallet endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeDeleteDexWalletResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body DeleteDexWalletResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("dexWallet", "deleteDexWallet", err)
			}
			res := NewDeleteDexWalletResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("dexWallet", "deleteDexWallet", resp.StatusCode, string(body))
		}
	}
}

// BuildVaultListRequest instantiates a HTTP request object with method and
// path set to call the "dexWallet" service "vaultList" endpoint
func (c *Client) BuildVaultListRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: VaultListDexWalletPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("dexWallet", "vaultList", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeVaultListResponse returns a decoder for responses returned by the
// dexWallet vaultList endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeVaultListResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body VaultListResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("dexWallet", "vaultList", err)
			}
			err = ValidateVaultListResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("dexWallet", "vaultList", err)
			}
			res := NewVaultListResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("dexWallet", "vaultList", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdateLpWalletRequest instantiates a HTTP request object with method
// and path set to call the "dexWallet" service "updateLpWallet" endpoint
func (c *Client) BuildUpdateLpWalletRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdateLpWalletDexWalletPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("dexWallet", "updateLpWallet", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeUpdateLpWalletResponse returns a decoder for responses returned by the
// dexWallet updateLpWallet endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeUpdateLpWalletResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdateLpWalletResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("dexWallet", "updateLpWallet", err)
			}
			err = ValidateUpdateLpWalletResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("dexWallet", "updateLpWallet", err)
			}
			res := NewUpdateLpWalletResultOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("dexWallet", "updateLpWallet", resp.StatusCode, string(body))
		}
	}
}

// unmarshalWalletRowResponseBodyToDexwalletWalletRow builds a value of type
// *dexwallet.WalletRow from a value of type *WalletRowResponseBody.
func unmarshalWalletRowResponseBodyToDexwalletWalletRow(v *WalletRowResponseBody) *dexwallet.WalletRow {
	if v == nil {
		return nil
	}
	res := &dexwallet.WalletRow{
		ID:                  v.ID,
		WalletName:          *v.WalletName,
		PrivateKey:          v.PrivateKey,
		Address:             v.Address,
		ChainType:           *v.ChainType,
		AccountID:           v.AccountID,
		ChainID:             *v.ChainID,
		StoreID:             v.StoreID,
		VaultHostType:       v.VaultHostType,
		VaultName:           v.VaultName,
		VaultSecertType:     v.VaultSecertType,
		SignServiceEndpoint: v.SignServiceEndpoint,
		WalletType:          *v.WalletType,
		Balance:             v.Balance,
	}

	return res
}

// unmarshalVaultRowResponseBodyToDexwalletVaultRow builds a value of type
// *dexwallet.VaultRow from a value of type *VaultRowResponseBody.
func unmarshalVaultRowResponseBodyToDexwalletVaultRow(v *VaultRowResponseBody) *dexwallet.VaultRow {
	res := &dexwallet.VaultRow{
		Address:    v.Address,
		HostType:   v.HostType,
		ID:         v.ID,
		Name:       v.Name,
		SecertType: v.SecertType,
	}

	return res
}
