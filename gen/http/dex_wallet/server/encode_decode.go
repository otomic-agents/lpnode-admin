// Code generated by goa v3.11.0, DO NOT EDIT.
//
// dexWallet HTTP server encoders and decoders
//
// Command:
// $ goa gen admin-panel/design

package server

import (
	dexwallet "admin-panel/gen/dex_wallet"
	"context"
	"io"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListDexWalletResponse returns an encoder for responses returned by the
// dexWallet listDexWallet endpoint.
func EncodeListDexWalletResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*dexwallet.ListDexWalletResult)
		enc := encoder(ctx, w)
		body := NewListDexWalletResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeCreateDexWalletResponse returns an encoder for responses returned by
// the dexWallet createDexWallet endpoint.
func EncodeCreateDexWalletResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*dexwallet.CreateDexWalletResult)
		enc := encoder(ctx, w)
		body := NewCreateDexWalletResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeCreateDexWalletRequest returns a decoder for requests sent to the
// dexWallet createDexWallet endpoint.
func DecodeCreateDexWalletRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body CreateDexWalletRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateCreateDexWalletRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewCreateDexWalletWalletRow(&body)

		return payload, nil
	}
}

// EncodeDeleteDexWalletResponse returns an encoder for responses returned by
// the dexWallet deleteDexWallet endpoint.
func EncodeDeleteDexWalletResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*dexwallet.DeleteDexWalletResult)
		enc := encoder(ctx, w)
		body := NewDeleteDexWalletResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeDeleteDexWalletRequest returns a decoder for requests sent to the
// dexWallet deleteDexWallet endpoint.
func DecodeDeleteDexWalletRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body DeleteDexWalletRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateDeleteDexWalletRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewDeleteDexWalletDeleteFilter(&body)

		return payload, nil
	}
}

// EncodeVaultListResponse returns an encoder for responses returned by the
// dexWallet vaultList endpoint.
func EncodeVaultListResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*dexwallet.VaultListResult)
		enc := encoder(ctx, w)
		body := NewVaultListResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeUpdateLpWalletResponse returns an encoder for responses returned by
// the dexWallet updateLpWallet endpoint.
func EncodeUpdateLpWalletResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.(*dexwallet.UpdateLpWalletResult)
		enc := encoder(ctx, w)
		body := NewUpdateLpWalletResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// marshalDexwalletWalletRowToWalletRowResponseBody builds a value of type
// *WalletRowResponseBody from a value of type *dexwallet.WalletRow.
func marshalDexwalletWalletRowToWalletRowResponseBody(v *dexwallet.WalletRow) *WalletRowResponseBody {
	if v == nil {
		return nil
	}
	res := &WalletRowResponseBody{
		ID:                  v.ID,
		WalletName:          v.WalletName,
		PrivateKey:          v.PrivateKey,
		Address:             v.Address,
		ChainType:           v.ChainType,
		AccountID:           v.AccountID,
		ChainID:             v.ChainID,
		StoreID:             v.StoreID,
		VaultHostType:       v.VaultHostType,
		VaultName:           v.VaultName,
		VaultSecertType:     v.VaultSecertType,
		SignServiceEndpoint: v.SignServiceEndpoint,
		WalletType:          v.WalletType,
	}

	return res
}

// marshalDexwalletVaultRowToVaultRowResponseBody builds a value of type
// *VaultRowResponseBody from a value of type *dexwallet.VaultRow.
func marshalDexwalletVaultRowToVaultRowResponseBody(v *dexwallet.VaultRow) *VaultRowResponseBody {
	res := &VaultRowResponseBody{
		Address:    v.Address,
		HostType:   v.HostType,
		ID:         v.ID,
		Name:       v.Name,
		SecertType: v.SecertType,
	}

	return res
}
