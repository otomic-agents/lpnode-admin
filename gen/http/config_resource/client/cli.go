// Code generated by goa v3.11.0, DO NOT EDIT.
//
// configResource HTTP client CLI support package
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	configresource "admin-panel/gen/config_resource"
	"encoding/json"
	"fmt"
)

// BuildCreateResourcePayload builds the payload for the configResource
// createResource endpoint from CLI flags.
func BuildCreateResourcePayload(configResourceCreateResourceBody string) (*configresource.CreateResourcePayload, error) {
	var err error
	var body CreateResourceRequestBody
	{
		err = json.Unmarshal([]byte(configResourceCreateResourceBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"appName\": \"Nihil explicabo quia qui autem.\",\n      \"clientId\": \"Suscipit qui nemo dolores.\",\n      \"template\": \"Provident non maxime.\",\n      \"version\": \"Perspiciatis error molestias.\"\n   }'")
		}
	}
	v := &configresource.CreateResourcePayload{
		AppName:  body.AppName,
		Version:  body.Version,
		ClientID: body.ClientID,
		Template: body.Template,
	}

	return v, nil
}

// BuildGetResourcePayload builds the payload for the configResource
// getResource endpoint from CLI flags.
func BuildGetResourcePayload(configResourceGetResourceBody string) (*configresource.GetResourcePayload, error) {
	var err error
	var body GetResourceRequestBody
	{
		err = json.Unmarshal([]byte(configResourceGetResourceBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"clientId\": \"Aliquid suscipit quia assumenda rerum sed dolores.\"\n   }'")
		}
	}
	v := &configresource.GetResourcePayload{
		ClientID: body.ClientID,
	}

	return v, nil
}

// BuildEditResultPayload builds the payload for the configResource editResult
// endpoint from CLI flags.
func BuildEditResultPayload(configResourceEditResultBody string) (*configresource.EditResultPayload, error) {
	var err error
	var body EditResultRequestBody
	{
		err = json.Unmarshal([]byte(configResourceEditResultBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"appName\": \"Dicta eveniet nihil quo sint.\",\n      \"clientId\": \"Eaque cum sequi sunt qui culpa.\",\n      \"template\": \"Explicabo consectetur quod quod perspiciatis doloremque minima.\",\n      \"templateResult\": \"Voluptatum ratione sapiente quas.\",\n      \"version\": \"Recusandae sed vel qui et.\",\n      \"versionHash\": \"In numquam et.\"\n   }'")
		}
	}
	v := &configresource.EditResultPayload{
		TemplateResult: body.TemplateResult,
		Template:       body.Template,
		ClientID:       body.ClientID,
		AppName:        body.AppName,
		Version:        body.Version,
		VersionHash:    body.VersionHash,
	}

	return v, nil
}
