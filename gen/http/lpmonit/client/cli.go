// Code generated by goa v3.11.0, DO NOT EDIT.
//
// lpmonit HTTP client CLI support package
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	lpmonit "admin-panel/gen/lpmonit"
	"encoding/json"
	"fmt"
)

// BuildAddScriptPayload builds the payload for the lpmonit add_script endpoint
// from CLI flags.
func BuildAddScriptPayload(lpmonitAddScriptBody string) (*lpmonit.AddScriptPayload, error) {
	var err error
	var body AddScriptRequestBody
	{
		err = json.Unmarshal([]byte(lpmonitAddScriptBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"cron\": \"Nihil fugit et nesciunt est dolores a.\",\n      \"name\": \"Accusamus et.\",\n      \"scriptBody\": \"Et iure vel voluptatum excepturi.\"\n   }'")
		}
	}
	v := &lpmonit.AddScriptPayload{
		Name:       body.Name,
		Cron:       body.Cron,
		ScriptBody: body.ScriptBody,
	}

	return v, nil
}

// BuildDeleteScriptPayload builds the payload for the lpmonit delete_script
// endpoint from CLI flags.
func BuildDeleteScriptPayload(lpmonitDeleteScriptBody string) (*lpmonit.DeleteScriptPayload, error) {
	var err error
	var body DeleteScriptRequestBody
	{
		err = json.Unmarshal([]byte(lpmonitDeleteScriptBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"_id\": \"Temporibus officia.\"\n   }'")
		}
	}
	v := &lpmonit.DeleteScriptPayload{
		ID: body.ID,
	}

	return v, nil
}

// BuildRunScriptPayload builds the payload for the lpmonit run_script endpoint
// from CLI flags.
func BuildRunScriptPayload(lpmonitRunScriptBody string) (*lpmonit.RunScriptPayload, error) {
	var err error
	var body RunScriptRequestBody
	{
		err = json.Unmarshal([]byte(lpmonitRunScriptBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"scriptContent\": \"Eaque excepturi.\"\n   }'")
		}
	}
	v := &lpmonit.RunScriptPayload{
		ScriptContent: body.ScriptContent,
	}

	return v, nil
}

// BuildRunResultPayload builds the payload for the lpmonit run_result endpoint
// from CLI flags.
func BuildRunResultPayload(lpmonitRunResultBody string) (*lpmonit.RunResultPayload, error) {
	var err error
	var body RunResultRequestBody
	{
		err = json.Unmarshal([]byte(lpmonitRunResultBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"scriptName\": \"Et dolor dignissimos.\"\n   }'")
		}
	}
	v := &lpmonit.RunResultPayload{
		ScriptName: body.ScriptName,
	}

	return v, nil
}
