// Code generated by goa v3.11.0, DO NOT EDIT.
//
// bridgeConfig HTTP client types
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	bridgeconfig "admin-panel/gen/bridge_config"
)

// BridgeCreateRequestBody is the type of the "bridgeConfig" service
// "bridgeCreate" endpoint HTTP request body.
type BridgeCreateRequestBody struct {
	// bridge name ****
	BridgeName string `form:"bridgeName" json:"bridgeName" xml:"bridgeName"`
	// mongodb primary key, from basedata
	SrcChainID string `form:"srcChainId" json:"srcChainId" xml:"srcChainId"`
	// mongodb primary key, from basedata
	DstChainID string `form:"dstChainId" json:"dstChainId" xml:"dstChainId"`
	// mongodb primary key, from tokenlist
	SrcTokenID string `form:"srcTokenId" json:"srcTokenId" xml:"srcTokenId"`
	// mongodb primary key, from tokenlist
	DstTokenID string `form:"dstTokenId" json:"dstTokenId" xml:"dstTokenId"`
	// mongodb primary key, from walletlist
	WalletID string `form:"walletId" json:"walletId" xml:"walletId"`
	// mongodb primary key, from walletlist
	SrcWalletID string `form:"srcWalletId" json:"srcWalletId" xml:"srcWalletId"`
	// amm name at install
	AmmName string `form:"ammName" json:"ammName" xml:"ammName"`
	// relay api key
	RelayAPIKey string `form:"relayApiKey" json:"relayApiKey" xml:"relayApiKey"`
	// relayUri
	RelayURI      string `form:"relayUri" json:"relayUri" xml:"relayUri"`
	EnableHedge   bool   `form:"enableHedge" json:"enableHedge" xml:"enableHedge"`
	EnableLimiter bool   `form:"enableLimiter" json:"enableLimiter" xml:"enableLimiter"`
}

// BridgeDeleteRequestBody is the type of the "bridgeConfig" service
// "bridgeDelete" endpoint HTTP request body.
type BridgeDeleteRequestBody struct {
	// mongodb primary key
	ID string `form:"id" json:"id" xml:"id"`
}

// BridgeTestRequestBody is the type of the "bridgeConfig" service "bridgeTest"
// endpoint HTTP request body.
type BridgeTestRequestBody struct {
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
}

// BridgeCreateResponseBody is the type of the "bridgeConfig" service
// "bridgeCreate" endpoint HTTP response body.
type BridgeCreateResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// result
	Result  *int64  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// BridgeListResponseBody is the type of the "bridgeConfig" service
// "bridgeList" endpoint HTTP response body.
type BridgeListResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// chain list
	Result  []*ListBridgeItemResponseBody `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string                       `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// BridgeDeleteResponseBody is the type of the "bridgeConfig" service
// "bridgeDelete" endpoint HTTP response body.
type BridgeDeleteResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// result
	Result  *int64  `form:"result,omitempty" json:"result,omitempty" xml:"result,omitempty"`
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// BridgeTestResponseBody is the type of the "bridgeConfig" service
// "bridgeTest" endpoint HTTP response body.
type BridgeTestResponseBody struct {
	Code *int64 `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
}

// ListBridgeItemResponseBody is used to define fields on response body types.
type ListBridgeItemResponseBody struct {
	ID                *string `form:"_id,omitempty" json:"_id,omitempty" xml:"_id,omitempty"`
	DstChainID        *string `form:"dstChainId,omitempty" json:"dstChainId,omitempty" xml:"dstChainId,omitempty"`
	DstTokenID        *string `form:"dstTokenId,omitempty" json:"dstTokenId,omitempty" xml:"dstTokenId,omitempty"`
	SrcChainID        *string `form:"srcChainId,omitempty" json:"srcChainId,omitempty" xml:"srcChainId,omitempty"`
	SrcTokenID        *string `form:"srcTokenId,omitempty" json:"srcTokenId,omitempty" xml:"srcTokenId,omitempty"`
	AmmName           *string `form:"ammName,omitempty" json:"ammName,omitempty" xml:"ammName,omitempty"`
	BridgeName        *string `form:"bridgeName,omitempty" json:"bridgeName,omitempty" xml:"bridgeName,omitempty"`
	DstChainRawID     *int64  `form:"dstChainRawId,omitempty" json:"dstChainRawId,omitempty" xml:"dstChainRawId,omitempty"`
	DstClientURI      *string `form:"dstClientUri,omitempty" json:"dstClientUri,omitempty" xml:"dstClientUri,omitempty"`
	DstToken          *string `form:"dstToken,omitempty" json:"dstToken,omitempty" xml:"dstToken,omitempty"`
	LpReceiverAddress *string `form:"lpReceiverAddress,omitempty" json:"lpReceiverAddress,omitempty" xml:"lpReceiverAddress,omitempty"`
	MsmqName          *string `form:"msmqName,omitempty" json:"msmqName,omitempty" xml:"msmqName,omitempty"`
	SrcChainRawID     *int64  `form:"srcChainRawId,omitempty" json:"srcChainRawId,omitempty" xml:"srcChainRawId,omitempty"`
	SrcToken          *string `form:"srcToken,omitempty" json:"srcToken,omitempty" xml:"srcToken,omitempty"`
	WalletName        *string `form:"walletName,omitempty" json:"walletName,omitempty" xml:"walletName,omitempty"`
	WalletID          *string `form:"walletId,omitempty" json:"walletId,omitempty" xml:"walletId,omitempty"`
	EnableHedge       *bool   `form:"enableHedge,omitempty" json:"enableHedge,omitempty" xml:"enableHedge,omitempty"`
	// Source chain token balance
	SrcTokenBalance *string `form:"srcTokenBalance,omitempty" json:"srcTokenBalance,omitempty" xml:"srcTokenBalance,omitempty"`
	// Destination chain token balance
	DstTokenBalance *string `form:"dstTokenBalance,omitempty" json:"dstTokenBalance,omitempty" xml:"dstTokenBalance,omitempty"`
	// Source token decimals
	SrcTokenDecimals *int64 `form:"srcTokenDecimals,omitempty" json:"srcTokenDecimals,omitempty" xml:"srcTokenDecimals,omitempty"`
	// Destination token decimals
	DstTokenDecimals *int64 `form:"dstTokenDecimals,omitempty" json:"dstTokenDecimals,omitempty" xml:"dstTokenDecimals,omitempty"`
}

// NewBridgeCreateRequestBody builds the HTTP request body from the payload of
// the "bridgeCreate" endpoint of the "bridgeConfig" service.
func NewBridgeCreateRequestBody(p *bridgeconfig.BridgeItem) *BridgeCreateRequestBody {
	body := &BridgeCreateRequestBody{
		BridgeName:    p.BridgeName,
		SrcChainID:    p.SrcChainID,
		DstChainID:    p.DstChainID,
		SrcTokenID:    p.SrcTokenID,
		DstTokenID:    p.DstTokenID,
		WalletID:      p.WalletID,
		SrcWalletID:   p.SrcWalletID,
		AmmName:       p.AmmName,
		RelayAPIKey:   p.RelayAPIKey,
		RelayURI:      p.RelayURI,
		EnableHedge:   p.EnableHedge,
		EnableLimiter: p.EnableLimiter,
	}
	{
		var zero bool
		if body.EnableHedge == zero {
			body.EnableHedge = true
		}
	}
	{
		var zero bool
		if body.EnableLimiter == zero {
			body.EnableLimiter = true
		}
	}
	return body
}

// NewBridgeDeleteRequestBody builds the HTTP request body from the payload of
// the "bridgeDelete" endpoint of the "bridgeConfig" service.
func NewBridgeDeleteRequestBody(p *bridgeconfig.DeleteBridgeFilter) *BridgeDeleteRequestBody {
	body := &BridgeDeleteRequestBody{
		ID: p.ID,
	}
	return body
}

// NewBridgeTestRequestBody builds the HTTP request body from the payload of
// the "bridgeTest" endpoint of the "bridgeConfig" service.
func NewBridgeTestRequestBody(p *bridgeconfig.BridgeTestPayload) *BridgeTestRequestBody {
	body := &BridgeTestRequestBody{
		ID: p.ID,
	}
	return body
}

// NewBridgeCreateResultOK builds a "bridgeConfig" service "bridgeCreate"
// endpoint result from a HTTP "OK" response.
func NewBridgeCreateResultOK(body *BridgeCreateResponseBody) *bridgeconfig.BridgeCreateResult {
	v := &bridgeconfig.BridgeCreateResult{
		Code:    body.Code,
		Result:  body.Result,
		Message: body.Message,
	}

	return v
}

// NewBridgeListResultOK builds a "bridgeConfig" service "bridgeList" endpoint
// result from a HTTP "OK" response.
func NewBridgeListResultOK(body *BridgeListResponseBody) *bridgeconfig.BridgeListResult {
	v := &bridgeconfig.BridgeListResult{
		Code:    body.Code,
		Message: body.Message,
	}
	if body.Result != nil {
		v.Result = make([]*bridgeconfig.ListBridgeItem, len(body.Result))
		for i, val := range body.Result {
			v.Result[i] = unmarshalListBridgeItemResponseBodyToBridgeconfigListBridgeItem(val)
		}
	}

	return v
}

// NewBridgeDeleteResultOK builds a "bridgeConfig" service "bridgeDelete"
// endpoint result from a HTTP "OK" response.
func NewBridgeDeleteResultOK(body *BridgeDeleteResponseBody) *bridgeconfig.BridgeDeleteResult {
	v := &bridgeconfig.BridgeDeleteResult{
		Code:    body.Code,
		Result:  body.Result,
		Message: body.Message,
	}

	return v
}

// NewBridgeTestResultOK builds a "bridgeConfig" service "bridgeTest" endpoint
// result from a HTTP "OK" response.
func NewBridgeTestResultOK(body *BridgeTestResponseBody) *bridgeconfig.BridgeTestResult {
	v := &bridgeconfig.BridgeTestResult{
		Code: body.Code,
	}

	return v
}
