// Code generated by goa v3.11.0, DO NOT EDIT.
//
// installCtrlPanel HTTP client CLI support package
//
// Command:
// $ goa gen admin-panel/design

package client

import (
	installctrlpanel "admin-panel/gen/install_ctrl_panel"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildListInstallPayload builds the payload for the installCtrlPanel
// listInstall endpoint from CLI flags.
func BuildListInstallPayload(installCtrlPanelListInstallBody string) (*installctrlpanel.ListInstallPayload, error) {
	var err error
	var body ListInstallRequestBody
	{
		err = json.Unmarshal([]byte(installCtrlPanelListInstallBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"installType\": \"Repudiandae incidunt.\"\n   }'")
		}
	}
	v := &installctrlpanel.ListInstallPayload{
		InstallType: body.InstallType,
	}

	return v, nil
}

// BuildInstallLpClientPayload builds the payload for the installCtrlPanel
// installLpClient endpoint from CLI flags.
func BuildInstallLpClientPayload(installCtrlPanelInstallLpClientBody string) (*installctrlpanel.InstallLpClientPayload, error) {
	var err error
	var body InstallLpClientRequestBody
	{
		err = json.Unmarshal([]byte(installCtrlPanelInstallLpClientBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"setupConfig\": {\n         \"awsAccessKeyId\": \"Nobis aperiam.\",\n         \"awsSecretAccessKey\": \"Corporis voluptas.\",\n         \"connectionExplorerurl\": \"Ad consequuntur nihil et quasi vitae.\",\n         \"connectionHelperurl\": \"Et natus debitis repellendus enim.\",\n         \"connectionNodeurl\": \"Soluta molestias voluptatem sequi nostrum.\",\n         \"connectionWalleturl\": \"Ipsa quos iure quisquam in.\",\n         \"containerPort\": \"Sit aspernatur reiciendis voluptas.\",\n         \"customEnv\": [\n            {\n               \"key\": \"Aut facere.\",\n               \"value\": \"Ut necessitatibus impedit blanditiis.\"\n            },\n            {\n               \"key\": \"Aut facere.\",\n               \"value\": \"Ut necessitatibus impedit blanditiis.\"\n            },\n            {\n               \"key\": \"Aut facere.\",\n               \"value\": \"Ut necessitatibus impedit blanditiis.\"\n            },\n            {\n               \"key\": \"Aut facere.\",\n               \"value\": \"Ut necessitatibus impedit blanditiis.\"\n            }\n         ],\n         \"deploymentName\": \"Repellendus ut.\",\n         \"imageRepository\": \"Exercitationem ab labore maiores odit porro.\",\n         \"install\": true,\n         \"rpcUrl\": \"Consequatur illum nulla.\",\n         \"serviceName\": \"Voluptatibus et est sunt consectetur delectus.\",\n         \"startBlock\": \"Beatae soluta nihil architecto eligendi necessitatibus.\",\n         \"type\": \"Consequatur iure et blanditiis.\"\n      }\n   }'")
		}
		if body.SetupConfig == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("setupConfig", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &installctrlpanel.InstallLpClientPayload{}
	if body.SetupConfig != nil {
		v.SetupConfig = marshalAmmClientSetupConfigRequestBodyToInstallctrlpanelAmmClientSetupConfig(body.SetupConfig)
	}

	return v, nil
}

// BuildUninstallLpClientPayload builds the payload for the installCtrlPanel
// uninstallLpClient endpoint from CLI flags.
func BuildUninstallLpClientPayload(installCtrlPanelUninstallLpClientBody string) (*installctrlpanel.UninstallLpClientPayload, error) {
	var err error
	var body UninstallLpClientRequestBody
	{
		err = json.Unmarshal([]byte(installCtrlPanelUninstallLpClientBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"setupConfig\": {\n         \"type\": \"Recusandae tempora quia maxime aliquam delectus.\",\n         \"uninstall\": false\n      }\n   }'")
		}
		if body.SetupConfig == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("setupConfig", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &installctrlpanel.UninstallLpClientPayload{}
	if body.SetupConfig != nil {
		v.SetupConfig = marshalAmmClientUnSetupConfigRequestBodyToInstallctrlpanelAmmClientUnSetupConfig(body.SetupConfig)
	}

	return v, nil
}

// BuildInstallDeploymentPayload builds the payload for the installCtrlPanel
// installDeployment endpoint from CLI flags.
func BuildInstallDeploymentPayload(installCtrlPanelInstallDeploymentBody string) (*installctrlpanel.InstallDeploymentPayload, error) {
	var err error
	var body InstallDeploymentRequestBody
	{
		err = json.Unmarshal([]byte(installCtrlPanelInstallDeploymentBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"setupConfig\": {\n         \"containerPort\": \"Molestias dolor eum consequuntur saepe nobis.\",\n         \"customEnv\": [\n            {\n               \"key\": \"Aut facere.\",\n               \"value\": \"Ut necessitatibus impedit blanditiis.\"\n            },\n            {\n               \"key\": \"Aut facere.\",\n               \"value\": \"Ut necessitatibus impedit blanditiis.\"\n            },\n            {\n               \"key\": \"Aut facere.\",\n               \"value\": \"Ut necessitatibus impedit blanditiis.\"\n            }\n         ],\n         \"imageRepository\": \"Magni est.\",\n         \"install\": true,\n         \"installType\": \"userApp\",\n         \"name\": \"Et repudiandae doloribus fugiat perspiciatis quam asperiores.\"\n      }\n   }'")
		}
		if body.SetupConfig == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("setupConfig", "body"))
		}
		if body.SetupConfig != nil {
			if err2 := ValidateDeploymentSetupConfigRequestBody(body.SetupConfig); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
		if err != nil {
			return nil, err
		}
	}
	v := &installctrlpanel.InstallDeploymentPayload{}
	if body.SetupConfig != nil {
		v.SetupConfig = marshalDeploymentSetupConfigRequestBodyToInstallctrlpanelDeploymentSetupConfig(body.SetupConfig)
	}

	return v, nil
}

// BuildUninstallDeploymentPayload builds the payload for the installCtrlPanel
// uninstallDeployment endpoint from CLI flags.
func BuildUninstallDeploymentPayload(installCtrlPanelUninstallDeploymentBody string) (*installctrlpanel.UninstallDeploymentPayload, error) {
	var err error
	var body UninstallDeploymentRequestBody
	{
		err = json.Unmarshal([]byte(installCtrlPanelUninstallDeploymentBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"setupConfig\": {\n         \"installType\": \"Fuga consequuntur fugiat id beatae ullam.\",\n         \"name\": \"Voluptatem ut quo maxime minus quis.\",\n         \"uninstall\": true\n      }\n   }'")
		}
		if body.SetupConfig == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("setupConfig", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &installctrlpanel.UninstallDeploymentPayload{}
	if body.SetupConfig != nil {
		v.SetupConfig = marshalUnDeploymentSetupConfigRequestBodyToInstallctrlpanelUnDeploymentSetupConfig(body.SetupConfig)
	}

	return v, nil
}

// BuildUpdateDeploymentPayload builds the payload for the installCtrlPanel
// updateDeployment endpoint from CLI flags.
func BuildUpdateDeploymentPayload(installCtrlPanelUpdateDeploymentBody string) (*installctrlpanel.UpdateDeploymentPayload, error) {
	var err error
	var body UpdateDeploymentRequestBody
	{
		err = json.Unmarshal([]byte(installCtrlPanelUpdateDeploymentBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"setupConfig\": {\n         \"installContext\": \"Culpa eligendi aut.\",\n         \"installType\": \"Est dolores a vero et.\",\n         \"name\": \"Vel voluptatum.\",\n         \"update\": true\n      }\n   }'")
		}
		if body.SetupConfig == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("setupConfig", "body"))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &installctrlpanel.UpdateDeploymentPayload{}
	if body.SetupConfig != nil {
		v.SetupConfig = marshalUpdateDeploymentConfigRequestBodyToInstallctrlpanelUpdateDeploymentConfig(body.SetupConfig)
	}

	return v, nil
}
