// Code generated by goa v3.11.0, DO NOT EDIT.
//
// apiService HTTP client CLI support package
//
// Command:
// $ goa gen admin-panel/design

package cli

import (
	accountcexc "admin-panel/gen/http/account_cex/client"
	accountdexc "admin-panel/gen/http/account_dex/client"
	ammordercenterc "admin-panel/gen/http/amm_order_center/client"
	authenticationlimiterc "admin-panel/gen/http/authentication_limiter/client"
	basedatac "admin-panel/gen/http/base_data/client"
	bridgeconfigc "admin-panel/gen/http/bridge_config/client"
	chainconfigc "admin-panel/gen/http/chain_config/client"
	configresourcec "admin-panel/gen/http/config_resource/client"
	dexwalletc "admin-panel/gen/http/dex_wallet/client"
	hedgec "admin-panel/gen/http/hedge/client"
	installctrlpanelc "admin-panel/gen/http/install_ctrl_panel/client"
	lpregisterc "admin-panel/gen/http/lp_register/client"
	lpmonitc "admin-panel/gen/http/lpmonit/client"
	mainlogicc "admin-panel/gen/http/main_logic/client"
	ordercenterc "admin-panel/gen/http/order_center/client"
	relayaccountc "admin-panel/gen/http/relay_account/client"
	relaylistc "admin-panel/gen/http/relay_list/client"
	settingsc "admin-panel/gen/http/settings/client"
	statuslistc "admin-panel/gen/http/status_list/client"
	taskmanagerc "admin-panel/gen/http/task_manager/client"
	tokenmanagerc "admin-panel/gen/http/token_manager/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `main-logic (main-logic|main-logic-link)
account-cex wallet-info
account-dex wallet-info
amm-order-center list
authentication-limiter (get-authentication-limiter|set-authentication-limiter|del-authentication-limiter)
base-data (chain-data-list|get-lp-info|run-time-env|get-wallet-and-tokens)
bridge-config (bridge-create|bridge-list|bridge-delete|bridge-test)
chain-config (set-chain-list|del-chain-list|chain-list|set-chain-gas-usd|set-chain-client-config)
config-resource (create-resource|get-resource|list-resource|delete-result|edit-result)
dex-wallet (list-dex-wallet|create-dex-wallet|delete-dex-wallet|vault-list|update-lp-wallet)
hedge (list|edit|del)
install-ctrl-panel (list-install|install-lp-client|uninstall-lp-client|install-deployment|uninstall-deployment|update-deployment)
lpmonit (add-script|list-script|delete-script|run-script|run-result)
order-center list
lp-register (register-all|un-register-all)
relay-account (list-account|register-account|delete-account)
relay-list list-relay
settings settings
status-list stat-list
task-manager (task-list|task-deploy|un-deploy|task-create)
token-manager (token-list|token-create|token-delete)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` main-logic main-logic` + "\n" +
		os.Args[0] + ` account-cex wallet-info` + "\n" +
		os.Args[0] + ` account-dex wallet-info --body '{
      "chainId": 6418992234028039074
   }'` + "\n" +
		os.Args[0] + ` amm-order-center list --body '{
      "ammName": "Adipisci suscipit eum aliquam.",
      "page": 1600390740666236035,
      "pageSize": 6144641646432185358,
      "status": 6764355684817960098
   }'` + "\n" +
		os.Args[0] + ` authentication-limiter get-authentication-limiter` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		mainLogicFlags = flag.NewFlagSet("main-logic", flag.ContinueOnError)

		mainLogicMainLogicFlags = flag.NewFlagSet("main-logic", flag.ExitOnError)

		mainLogicMainLogicLinkFlags = flag.NewFlagSet("main-logic-link", flag.ExitOnError)

		accountCexFlags = flag.NewFlagSet("account-cex", flag.ContinueOnError)

		accountCexWalletInfoFlags = flag.NewFlagSet("wallet-info", flag.ExitOnError)

		accountDexFlags = flag.NewFlagSet("account-dex", flag.ContinueOnError)

		accountDexWalletInfoFlags    = flag.NewFlagSet("wallet-info", flag.ExitOnError)
		accountDexWalletInfoBodyFlag = accountDexWalletInfoFlags.String("body", "REQUIRED", "")

		ammOrderCenterFlags = flag.NewFlagSet("amm-order-center", flag.ContinueOnError)

		ammOrderCenterListFlags    = flag.NewFlagSet("list", flag.ExitOnError)
		ammOrderCenterListBodyFlag = ammOrderCenterListFlags.String("body", "REQUIRED", "")

		authenticationLimiterFlags = flag.NewFlagSet("authentication-limiter", flag.ContinueOnError)

		authenticationLimiterGetAuthenticationLimiterFlags = flag.NewFlagSet("get-authentication-limiter", flag.ExitOnError)

		authenticationLimiterSetAuthenticationLimiterFlags    = flag.NewFlagSet("set-authentication-limiter", flag.ExitOnError)
		authenticationLimiterSetAuthenticationLimiterBodyFlag = authenticationLimiterSetAuthenticationLimiterFlags.String("body", "REQUIRED", "")

		authenticationLimiterDelAuthenticationLimiterFlags = flag.NewFlagSet("del-authentication-limiter", flag.ExitOnError)

		baseDataFlags = flag.NewFlagSet("base-data", flag.ContinueOnError)

		baseDataChainDataListFlags = flag.NewFlagSet("chain-data-list", flag.ExitOnError)

		baseDataGetLpInfoFlags = flag.NewFlagSet("get-lp-info", flag.ExitOnError)

		baseDataRunTimeEnvFlags = flag.NewFlagSet("run-time-env", flag.ExitOnError)

		baseDataGetWalletAndTokensFlags    = flag.NewFlagSet("get-wallet-and-tokens", flag.ExitOnError)
		baseDataGetWalletAndTokensBodyFlag = baseDataGetWalletAndTokensFlags.String("body", "REQUIRED", "")

		bridgeConfigFlags = flag.NewFlagSet("bridge-config", flag.ContinueOnError)

		bridgeConfigBridgeCreateFlags    = flag.NewFlagSet("bridge-create", flag.ExitOnError)
		bridgeConfigBridgeCreateBodyFlag = bridgeConfigBridgeCreateFlags.String("body", "REQUIRED", "")

		bridgeConfigBridgeListFlags = flag.NewFlagSet("bridge-list", flag.ExitOnError)

		bridgeConfigBridgeDeleteFlags    = flag.NewFlagSet("bridge-delete", flag.ExitOnError)
		bridgeConfigBridgeDeleteBodyFlag = bridgeConfigBridgeDeleteFlags.String("body", "REQUIRED", "")

		bridgeConfigBridgeTestFlags    = flag.NewFlagSet("bridge-test", flag.ExitOnError)
		bridgeConfigBridgeTestBodyFlag = bridgeConfigBridgeTestFlags.String("body", "REQUIRED", "")

		chainConfigFlags = flag.NewFlagSet("chain-config", flag.ContinueOnError)

		chainConfigSetChainListFlags    = flag.NewFlagSet("set-chain-list", flag.ExitOnError)
		chainConfigSetChainListBodyFlag = chainConfigSetChainListFlags.String("body", "REQUIRED", "")

		chainConfigDelChainListFlags    = flag.NewFlagSet("del-chain-list", flag.ExitOnError)
		chainConfigDelChainListBodyFlag = chainConfigDelChainListFlags.String("body", "REQUIRED", "")

		chainConfigChainListFlags = flag.NewFlagSet("chain-list", flag.ExitOnError)

		chainConfigSetChainGasUsdFlags    = flag.NewFlagSet("set-chain-gas-usd", flag.ExitOnError)
		chainConfigSetChainGasUsdBodyFlag = chainConfigSetChainGasUsdFlags.String("body", "REQUIRED", "")

		chainConfigSetChainClientConfigFlags    = flag.NewFlagSet("set-chain-client-config", flag.ExitOnError)
		chainConfigSetChainClientConfigBodyFlag = chainConfigSetChainClientConfigFlags.String("body", "REQUIRED", "")

		configResourceFlags = flag.NewFlagSet("config-resource", flag.ContinueOnError)

		configResourceCreateResourceFlags    = flag.NewFlagSet("create-resource", flag.ExitOnError)
		configResourceCreateResourceBodyFlag = configResourceCreateResourceFlags.String("body", "REQUIRED", "")

		configResourceGetResourceFlags    = flag.NewFlagSet("get-resource", flag.ExitOnError)
		configResourceGetResourceBodyFlag = configResourceGetResourceFlags.String("body", "REQUIRED", "")

		configResourceListResourceFlags = flag.NewFlagSet("list-resource", flag.ExitOnError)

		configResourceDeleteResultFlags = flag.NewFlagSet("delete-result", flag.ExitOnError)

		configResourceEditResultFlags    = flag.NewFlagSet("edit-result", flag.ExitOnError)
		configResourceEditResultBodyFlag = configResourceEditResultFlags.String("body", "REQUIRED", "")

		dexWalletFlags = flag.NewFlagSet("dex-wallet", flag.ContinueOnError)

		dexWalletListDexWalletFlags = flag.NewFlagSet("list-dex-wallet", flag.ExitOnError)

		dexWalletCreateDexWalletFlags    = flag.NewFlagSet("create-dex-wallet", flag.ExitOnError)
		dexWalletCreateDexWalletBodyFlag = dexWalletCreateDexWalletFlags.String("body", "REQUIRED", "")

		dexWalletDeleteDexWalletFlags    = flag.NewFlagSet("delete-dex-wallet", flag.ExitOnError)
		dexWalletDeleteDexWalletBodyFlag = dexWalletDeleteDexWalletFlags.String("body", "REQUIRED", "")

		dexWalletVaultListFlags = flag.NewFlagSet("vault-list", flag.ExitOnError)

		dexWalletUpdateLpWalletFlags = flag.NewFlagSet("update-lp-wallet", flag.ExitOnError)

		hedgeFlags = flag.NewFlagSet("hedge", flag.ContinueOnError)

		hedgeListFlags = flag.NewFlagSet("list", flag.ExitOnError)

		hedgeEditFlags    = flag.NewFlagSet("edit", flag.ExitOnError)
		hedgeEditBodyFlag = hedgeEditFlags.String("body", "REQUIRED", "")

		hedgeDelFlags    = flag.NewFlagSet("del", flag.ExitOnError)
		hedgeDelBodyFlag = hedgeDelFlags.String("body", "REQUIRED", "")

		installCtrlPanelFlags = flag.NewFlagSet("install-ctrl-panel", flag.ContinueOnError)

		installCtrlPanelListInstallFlags    = flag.NewFlagSet("list-install", flag.ExitOnError)
		installCtrlPanelListInstallBodyFlag = installCtrlPanelListInstallFlags.String("body", "REQUIRED", "")

		installCtrlPanelInstallLpClientFlags    = flag.NewFlagSet("install-lp-client", flag.ExitOnError)
		installCtrlPanelInstallLpClientBodyFlag = installCtrlPanelInstallLpClientFlags.String("body", "REQUIRED", "")

		installCtrlPanelUninstallLpClientFlags    = flag.NewFlagSet("uninstall-lp-client", flag.ExitOnError)
		installCtrlPanelUninstallLpClientBodyFlag = installCtrlPanelUninstallLpClientFlags.String("body", "REQUIRED", "")

		installCtrlPanelInstallDeploymentFlags    = flag.NewFlagSet("install-deployment", flag.ExitOnError)
		installCtrlPanelInstallDeploymentBodyFlag = installCtrlPanelInstallDeploymentFlags.String("body", "REQUIRED", "")

		installCtrlPanelUninstallDeploymentFlags    = flag.NewFlagSet("uninstall-deployment", flag.ExitOnError)
		installCtrlPanelUninstallDeploymentBodyFlag = installCtrlPanelUninstallDeploymentFlags.String("body", "REQUIRED", "")

		installCtrlPanelUpdateDeploymentFlags    = flag.NewFlagSet("update-deployment", flag.ExitOnError)
		installCtrlPanelUpdateDeploymentBodyFlag = installCtrlPanelUpdateDeploymentFlags.String("body", "REQUIRED", "")

		lpmonitFlags = flag.NewFlagSet("lpmonit", flag.ContinueOnError)

		lpmonitAddScriptFlags    = flag.NewFlagSet("add-script", flag.ExitOnError)
		lpmonitAddScriptBodyFlag = lpmonitAddScriptFlags.String("body", "REQUIRED", "")

		lpmonitListScriptFlags = flag.NewFlagSet("list-script", flag.ExitOnError)

		lpmonitDeleteScriptFlags    = flag.NewFlagSet("delete-script", flag.ExitOnError)
		lpmonitDeleteScriptBodyFlag = lpmonitDeleteScriptFlags.String("body", "REQUIRED", "")

		lpmonitRunScriptFlags    = flag.NewFlagSet("run-script", flag.ExitOnError)
		lpmonitRunScriptBodyFlag = lpmonitRunScriptFlags.String("body", "REQUIRED", "")

		lpmonitRunResultFlags    = flag.NewFlagSet("run-result", flag.ExitOnError)
		lpmonitRunResultBodyFlag = lpmonitRunResultFlags.String("body", "REQUIRED", "")

		orderCenterFlags = flag.NewFlagSet("order-center", flag.ContinueOnError)

		orderCenterListFlags    = flag.NewFlagSet("list", flag.ExitOnError)
		orderCenterListBodyFlag = orderCenterListFlags.String("body", "REQUIRED", "")

		lpRegisterFlags = flag.NewFlagSet("lp-register", flag.ContinueOnError)

		lpRegisterRegisterAllFlags = flag.NewFlagSet("register-all", flag.ExitOnError)

		lpRegisterUnRegisterAllFlags = flag.NewFlagSet("un-register-all", flag.ExitOnError)

		relayAccountFlags = flag.NewFlagSet("relay-account", flag.ContinueOnError)

		relayAccountListAccountFlags = flag.NewFlagSet("list-account", flag.ExitOnError)

		relayAccountRegisterAccountFlags    = flag.NewFlagSet("register-account", flag.ExitOnError)
		relayAccountRegisterAccountBodyFlag = relayAccountRegisterAccountFlags.String("body", "REQUIRED", "")

		relayAccountDeleteAccountFlags    = flag.NewFlagSet("delete-account", flag.ExitOnError)
		relayAccountDeleteAccountBodyFlag = relayAccountDeleteAccountFlags.String("body", "REQUIRED", "")

		relayListFlags = flag.NewFlagSet("relay-list", flag.ContinueOnError)

		relayListListRelayFlags = flag.NewFlagSet("list-relay", flag.ExitOnError)

		settingsFlags = flag.NewFlagSet("settings", flag.ContinueOnError)

		settingsSettingsFlags    = flag.NewFlagSet("settings", flag.ExitOnError)
		settingsSettingsBodyFlag = settingsSettingsFlags.String("body", "REQUIRED", "")

		statusListFlags = flag.NewFlagSet("status-list", flag.ContinueOnError)

		statusListStatListFlags = flag.NewFlagSet("stat-list", flag.ExitOnError)

		taskManagerFlags = flag.NewFlagSet("task-manager", flag.ContinueOnError)

		taskManagerTaskListFlags = flag.NewFlagSet("task-list", flag.ExitOnError)

		taskManagerTaskDeployFlags    = flag.NewFlagSet("task-deploy", flag.ExitOnError)
		taskManagerTaskDeployBodyFlag = taskManagerTaskDeployFlags.String("body", "REQUIRED", "")

		taskManagerUnDeployFlags    = flag.NewFlagSet("un-deploy", flag.ExitOnError)
		taskManagerUnDeployBodyFlag = taskManagerUnDeployFlags.String("body", "REQUIRED", "")

		taskManagerTaskCreateFlags    = flag.NewFlagSet("task-create", flag.ExitOnError)
		taskManagerTaskCreateBodyFlag = taskManagerTaskCreateFlags.String("body", "REQUIRED", "")

		tokenManagerFlags = flag.NewFlagSet("token-manager", flag.ContinueOnError)

		tokenManagerTokenListFlags = flag.NewFlagSet("token-list", flag.ExitOnError)

		tokenManagerTokenCreateFlags    = flag.NewFlagSet("token-create", flag.ExitOnError)
		tokenManagerTokenCreateBodyFlag = tokenManagerTokenCreateFlags.String("body", "REQUIRED", "")

		tokenManagerTokenDeleteFlags    = flag.NewFlagSet("token-delete", flag.ExitOnError)
		tokenManagerTokenDeleteBodyFlag = tokenManagerTokenDeleteFlags.String("body", "REQUIRED", "")
	)
	mainLogicFlags.Usage = mainLogicUsage
	mainLogicMainLogicFlags.Usage = mainLogicMainLogicUsage
	mainLogicMainLogicLinkFlags.Usage = mainLogicMainLogicLinkUsage

	accountCexFlags.Usage = accountCexUsage
	accountCexWalletInfoFlags.Usage = accountCexWalletInfoUsage

	accountDexFlags.Usage = accountDexUsage
	accountDexWalletInfoFlags.Usage = accountDexWalletInfoUsage

	ammOrderCenterFlags.Usage = ammOrderCenterUsage
	ammOrderCenterListFlags.Usage = ammOrderCenterListUsage

	authenticationLimiterFlags.Usage = authenticationLimiterUsage
	authenticationLimiterGetAuthenticationLimiterFlags.Usage = authenticationLimiterGetAuthenticationLimiterUsage
	authenticationLimiterSetAuthenticationLimiterFlags.Usage = authenticationLimiterSetAuthenticationLimiterUsage
	authenticationLimiterDelAuthenticationLimiterFlags.Usage = authenticationLimiterDelAuthenticationLimiterUsage

	baseDataFlags.Usage = baseDataUsage
	baseDataChainDataListFlags.Usage = baseDataChainDataListUsage
	baseDataGetLpInfoFlags.Usage = baseDataGetLpInfoUsage
	baseDataRunTimeEnvFlags.Usage = baseDataRunTimeEnvUsage
	baseDataGetWalletAndTokensFlags.Usage = baseDataGetWalletAndTokensUsage

	bridgeConfigFlags.Usage = bridgeConfigUsage
	bridgeConfigBridgeCreateFlags.Usage = bridgeConfigBridgeCreateUsage
	bridgeConfigBridgeListFlags.Usage = bridgeConfigBridgeListUsage
	bridgeConfigBridgeDeleteFlags.Usage = bridgeConfigBridgeDeleteUsage
	bridgeConfigBridgeTestFlags.Usage = bridgeConfigBridgeTestUsage

	chainConfigFlags.Usage = chainConfigUsage
	chainConfigSetChainListFlags.Usage = chainConfigSetChainListUsage
	chainConfigDelChainListFlags.Usage = chainConfigDelChainListUsage
	chainConfigChainListFlags.Usage = chainConfigChainListUsage
	chainConfigSetChainGasUsdFlags.Usage = chainConfigSetChainGasUsdUsage
	chainConfigSetChainClientConfigFlags.Usage = chainConfigSetChainClientConfigUsage

	configResourceFlags.Usage = configResourceUsage
	configResourceCreateResourceFlags.Usage = configResourceCreateResourceUsage
	configResourceGetResourceFlags.Usage = configResourceGetResourceUsage
	configResourceListResourceFlags.Usage = configResourceListResourceUsage
	configResourceDeleteResultFlags.Usage = configResourceDeleteResultUsage
	configResourceEditResultFlags.Usage = configResourceEditResultUsage

	dexWalletFlags.Usage = dexWalletUsage
	dexWalletListDexWalletFlags.Usage = dexWalletListDexWalletUsage
	dexWalletCreateDexWalletFlags.Usage = dexWalletCreateDexWalletUsage
	dexWalletDeleteDexWalletFlags.Usage = dexWalletDeleteDexWalletUsage
	dexWalletVaultListFlags.Usage = dexWalletVaultListUsage
	dexWalletUpdateLpWalletFlags.Usage = dexWalletUpdateLpWalletUsage

	hedgeFlags.Usage = hedgeUsage
	hedgeListFlags.Usage = hedgeListUsage
	hedgeEditFlags.Usage = hedgeEditUsage
	hedgeDelFlags.Usage = hedgeDelUsage

	installCtrlPanelFlags.Usage = installCtrlPanelUsage
	installCtrlPanelListInstallFlags.Usage = installCtrlPanelListInstallUsage
	installCtrlPanelInstallLpClientFlags.Usage = installCtrlPanelInstallLpClientUsage
	installCtrlPanelUninstallLpClientFlags.Usage = installCtrlPanelUninstallLpClientUsage
	installCtrlPanelInstallDeploymentFlags.Usage = installCtrlPanelInstallDeploymentUsage
	installCtrlPanelUninstallDeploymentFlags.Usage = installCtrlPanelUninstallDeploymentUsage
	installCtrlPanelUpdateDeploymentFlags.Usage = installCtrlPanelUpdateDeploymentUsage

	lpmonitFlags.Usage = lpmonitUsage
	lpmonitAddScriptFlags.Usage = lpmonitAddScriptUsage
	lpmonitListScriptFlags.Usage = lpmonitListScriptUsage
	lpmonitDeleteScriptFlags.Usage = lpmonitDeleteScriptUsage
	lpmonitRunScriptFlags.Usage = lpmonitRunScriptUsage
	lpmonitRunResultFlags.Usage = lpmonitRunResultUsage

	orderCenterFlags.Usage = orderCenterUsage
	orderCenterListFlags.Usage = orderCenterListUsage

	lpRegisterFlags.Usage = lpRegisterUsage
	lpRegisterRegisterAllFlags.Usage = lpRegisterRegisterAllUsage
	lpRegisterUnRegisterAllFlags.Usage = lpRegisterUnRegisterAllUsage

	relayAccountFlags.Usage = relayAccountUsage
	relayAccountListAccountFlags.Usage = relayAccountListAccountUsage
	relayAccountRegisterAccountFlags.Usage = relayAccountRegisterAccountUsage
	relayAccountDeleteAccountFlags.Usage = relayAccountDeleteAccountUsage

	relayListFlags.Usage = relayListUsage
	relayListListRelayFlags.Usage = relayListListRelayUsage

	settingsFlags.Usage = settingsUsage
	settingsSettingsFlags.Usage = settingsSettingsUsage

	statusListFlags.Usage = statusListUsage
	statusListStatListFlags.Usage = statusListStatListUsage

	taskManagerFlags.Usage = taskManagerUsage
	taskManagerTaskListFlags.Usage = taskManagerTaskListUsage
	taskManagerTaskDeployFlags.Usage = taskManagerTaskDeployUsage
	taskManagerUnDeployFlags.Usage = taskManagerUnDeployUsage
	taskManagerTaskCreateFlags.Usage = taskManagerTaskCreateUsage

	tokenManagerFlags.Usage = tokenManagerUsage
	tokenManagerTokenListFlags.Usage = tokenManagerTokenListUsage
	tokenManagerTokenCreateFlags.Usage = tokenManagerTokenCreateUsage
	tokenManagerTokenDeleteFlags.Usage = tokenManagerTokenDeleteUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "main-logic":
			svcf = mainLogicFlags
		case "account-cex":
			svcf = accountCexFlags
		case "account-dex":
			svcf = accountDexFlags
		case "amm-order-center":
			svcf = ammOrderCenterFlags
		case "authentication-limiter":
			svcf = authenticationLimiterFlags
		case "base-data":
			svcf = baseDataFlags
		case "bridge-config":
			svcf = bridgeConfigFlags
		case "chain-config":
			svcf = chainConfigFlags
		case "config-resource":
			svcf = configResourceFlags
		case "dex-wallet":
			svcf = dexWalletFlags
		case "hedge":
			svcf = hedgeFlags
		case "install-ctrl-panel":
			svcf = installCtrlPanelFlags
		case "lpmonit":
			svcf = lpmonitFlags
		case "order-center":
			svcf = orderCenterFlags
		case "lp-register":
			svcf = lpRegisterFlags
		case "relay-account":
			svcf = relayAccountFlags
		case "relay-list":
			svcf = relayListFlags
		case "settings":
			svcf = settingsFlags
		case "status-list":
			svcf = statusListFlags
		case "task-manager":
			svcf = taskManagerFlags
		case "token-manager":
			svcf = tokenManagerFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "main-logic":
			switch epn {
			case "main-logic":
				epf = mainLogicMainLogicFlags

			case "main-logic-link":
				epf = mainLogicMainLogicLinkFlags

			}

		case "account-cex":
			switch epn {
			case "wallet-info":
				epf = accountCexWalletInfoFlags

			}

		case "account-dex":
			switch epn {
			case "wallet-info":
				epf = accountDexWalletInfoFlags

			}

		case "amm-order-center":
			switch epn {
			case "list":
				epf = ammOrderCenterListFlags

			}

		case "authentication-limiter":
			switch epn {
			case "get-authentication-limiter":
				epf = authenticationLimiterGetAuthenticationLimiterFlags

			case "set-authentication-limiter":
				epf = authenticationLimiterSetAuthenticationLimiterFlags

			case "del-authentication-limiter":
				epf = authenticationLimiterDelAuthenticationLimiterFlags

			}

		case "base-data":
			switch epn {
			case "chain-data-list":
				epf = baseDataChainDataListFlags

			case "get-lp-info":
				epf = baseDataGetLpInfoFlags

			case "run-time-env":
				epf = baseDataRunTimeEnvFlags

			case "get-wallet-and-tokens":
				epf = baseDataGetWalletAndTokensFlags

			}

		case "bridge-config":
			switch epn {
			case "bridge-create":
				epf = bridgeConfigBridgeCreateFlags

			case "bridge-list":
				epf = bridgeConfigBridgeListFlags

			case "bridge-delete":
				epf = bridgeConfigBridgeDeleteFlags

			case "bridge-test":
				epf = bridgeConfigBridgeTestFlags

			}

		case "chain-config":
			switch epn {
			case "set-chain-list":
				epf = chainConfigSetChainListFlags

			case "del-chain-list":
				epf = chainConfigDelChainListFlags

			case "chain-list":
				epf = chainConfigChainListFlags

			case "set-chain-gas-usd":
				epf = chainConfigSetChainGasUsdFlags

			case "set-chain-client-config":
				epf = chainConfigSetChainClientConfigFlags

			}

		case "config-resource":
			switch epn {
			case "create-resource":
				epf = configResourceCreateResourceFlags

			case "get-resource":
				epf = configResourceGetResourceFlags

			case "list-resource":
				epf = configResourceListResourceFlags

			case "delete-result":
				epf = configResourceDeleteResultFlags

			case "edit-result":
				epf = configResourceEditResultFlags

			}

		case "dex-wallet":
			switch epn {
			case "list-dex-wallet":
				epf = dexWalletListDexWalletFlags

			case "create-dex-wallet":
				epf = dexWalletCreateDexWalletFlags

			case "delete-dex-wallet":
				epf = dexWalletDeleteDexWalletFlags

			case "vault-list":
				epf = dexWalletVaultListFlags

			case "update-lp-wallet":
				epf = dexWalletUpdateLpWalletFlags

			}

		case "hedge":
			switch epn {
			case "list":
				epf = hedgeListFlags

			case "edit":
				epf = hedgeEditFlags

			case "del":
				epf = hedgeDelFlags

			}

		case "install-ctrl-panel":
			switch epn {
			case "list-install":
				epf = installCtrlPanelListInstallFlags

			case "install-lp-client":
				epf = installCtrlPanelInstallLpClientFlags

			case "uninstall-lp-client":
				epf = installCtrlPanelUninstallLpClientFlags

			case "install-deployment":
				epf = installCtrlPanelInstallDeploymentFlags

			case "uninstall-deployment":
				epf = installCtrlPanelUninstallDeploymentFlags

			case "update-deployment":
				epf = installCtrlPanelUpdateDeploymentFlags

			}

		case "lpmonit":
			switch epn {
			case "add-script":
				epf = lpmonitAddScriptFlags

			case "list-script":
				epf = lpmonitListScriptFlags

			case "delete-script":
				epf = lpmonitDeleteScriptFlags

			case "run-script":
				epf = lpmonitRunScriptFlags

			case "run-result":
				epf = lpmonitRunResultFlags

			}

		case "order-center":
			switch epn {
			case "list":
				epf = orderCenterListFlags

			}

		case "lp-register":
			switch epn {
			case "register-all":
				epf = lpRegisterRegisterAllFlags

			case "un-register-all":
				epf = lpRegisterUnRegisterAllFlags

			}

		case "relay-account":
			switch epn {
			case "list-account":
				epf = relayAccountListAccountFlags

			case "register-account":
				epf = relayAccountRegisterAccountFlags

			case "delete-account":
				epf = relayAccountDeleteAccountFlags

			}

		case "relay-list":
			switch epn {
			case "list-relay":
				epf = relayListListRelayFlags

			}

		case "settings":
			switch epn {
			case "settings":
				epf = settingsSettingsFlags

			}

		case "status-list":
			switch epn {
			case "stat-list":
				epf = statusListStatListFlags

			}

		case "task-manager":
			switch epn {
			case "task-list":
				epf = taskManagerTaskListFlags

			case "task-deploy":
				epf = taskManagerTaskDeployFlags

			case "un-deploy":
				epf = taskManagerUnDeployFlags

			case "task-create":
				epf = taskManagerTaskCreateFlags

			}

		case "token-manager":
			switch epn {
			case "token-list":
				epf = tokenManagerTokenListFlags

			case "token-create":
				epf = tokenManagerTokenCreateFlags

			case "token-delete":
				epf = tokenManagerTokenDeleteFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "main-logic":
			c := mainlogicc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "main-logic":
				endpoint = c.MainLogic()
				data = nil
			case "main-logic-link":
				endpoint = c.MainLogicLink()
				data = nil
			}
		case "account-cex":
			c := accountcexc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "wallet-info":
				endpoint = c.WalletInfo()
				data = nil
			}
		case "account-dex":
			c := accountdexc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "wallet-info":
				endpoint = c.WalletInfo()
				data, err = accountdexc.BuildWalletInfoPayload(*accountDexWalletInfoBodyFlag)
			}
		case "amm-order-center":
			c := ammordercenterc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = ammordercenterc.BuildListPayload(*ammOrderCenterListBodyFlag)
			}
		case "authentication-limiter":
			c := authenticationlimiterc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get-authentication-limiter":
				endpoint = c.GetAuthenticationLimiter()
				data = nil
			case "set-authentication-limiter":
				endpoint = c.SetAuthenticationLimiter()
				data, err = authenticationlimiterc.BuildSetAuthenticationLimiterPayload(*authenticationLimiterSetAuthenticationLimiterBodyFlag)
			case "del-authentication-limiter":
				endpoint = c.DelAuthenticationLimiter()
				data = nil
			}
		case "base-data":
			c := basedatac.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "chain-data-list":
				endpoint = c.ChainDataList()
				data = nil
			case "get-lp-info":
				endpoint = c.GetLpInfo()
				data = nil
			case "run-time-env":
				endpoint = c.RunTimeEnv()
				data = nil
			case "get-wallet-and-tokens":
				endpoint = c.GetWalletAndTokens()
				data, err = basedatac.BuildGetWalletAndTokensPayload(*baseDataGetWalletAndTokensBodyFlag)
			}
		case "bridge-config":
			c := bridgeconfigc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "bridge-create":
				endpoint = c.BridgeCreate()
				data, err = bridgeconfigc.BuildBridgeCreatePayload(*bridgeConfigBridgeCreateBodyFlag)
			case "bridge-list":
				endpoint = c.BridgeList()
				data = nil
			case "bridge-delete":
				endpoint = c.BridgeDelete()
				data, err = bridgeconfigc.BuildBridgeDeletePayload(*bridgeConfigBridgeDeleteBodyFlag)
			case "bridge-test":
				endpoint = c.BridgeTest()
				data, err = bridgeconfigc.BuildBridgeTestPayload(*bridgeConfigBridgeTestBodyFlag)
			}
		case "chain-config":
			c := chainconfigc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "set-chain-list":
				endpoint = c.SetChainList()
				data, err = chainconfigc.BuildSetChainListPayload(*chainConfigSetChainListBodyFlag)
			case "del-chain-list":
				endpoint = c.DelChainList()
				data, err = chainconfigc.BuildDelChainListPayload(*chainConfigDelChainListBodyFlag)
			case "chain-list":
				endpoint = c.ChainList()
				data = nil
			case "set-chain-gas-usd":
				endpoint = c.SetChainGasUsd()
				data, err = chainconfigc.BuildSetChainGasUsdPayload(*chainConfigSetChainGasUsdBodyFlag)
			case "set-chain-client-config":
				endpoint = c.SetChainClientConfig()
				data, err = chainconfigc.BuildSetChainClientConfigPayload(*chainConfigSetChainClientConfigBodyFlag)
			}
		case "config-resource":
			c := configresourcec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "create-resource":
				endpoint = c.CreateResource()
				data, err = configresourcec.BuildCreateResourcePayload(*configResourceCreateResourceBodyFlag)
			case "get-resource":
				endpoint = c.GetResource()
				data, err = configresourcec.BuildGetResourcePayload(*configResourceGetResourceBodyFlag)
			case "list-resource":
				endpoint = c.ListResource()
				data = nil
			case "delete-result":
				endpoint = c.DeleteResult()
				data = nil
			case "edit-result":
				endpoint = c.EditResult()
				data, err = configresourcec.BuildEditResultPayload(*configResourceEditResultBodyFlag)
			}
		case "dex-wallet":
			c := dexwalletc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-dex-wallet":
				endpoint = c.ListDexWallet()
				data = nil
			case "create-dex-wallet":
				endpoint = c.CreateDexWallet()
				data, err = dexwalletc.BuildCreateDexWalletPayload(*dexWalletCreateDexWalletBodyFlag)
			case "delete-dex-wallet":
				endpoint = c.DeleteDexWallet()
				data, err = dexwalletc.BuildDeleteDexWalletPayload(*dexWalletDeleteDexWalletBodyFlag)
			case "vault-list":
				endpoint = c.VaultList()
				data = nil
			case "update-lp-wallet":
				endpoint = c.UpdateLpWallet()
				data = nil
			}
		case "hedge":
			c := hedgec.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data = nil
			case "edit":
				endpoint = c.Edit()
				data, err = hedgec.BuildEditPayload(*hedgeEditBodyFlag)
			case "del":
				endpoint = c.Del()
				data, err = hedgec.BuildDelPayload(*hedgeDelBodyFlag)
			}
		case "install-ctrl-panel":
			c := installctrlpanelc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-install":
				endpoint = c.ListInstall()
				data, err = installctrlpanelc.BuildListInstallPayload(*installCtrlPanelListInstallBodyFlag)
			case "install-lp-client":
				endpoint = c.InstallLpClient()
				data, err = installctrlpanelc.BuildInstallLpClientPayload(*installCtrlPanelInstallLpClientBodyFlag)
			case "uninstall-lp-client":
				endpoint = c.UninstallLpClient()
				data, err = installctrlpanelc.BuildUninstallLpClientPayload(*installCtrlPanelUninstallLpClientBodyFlag)
			case "install-deployment":
				endpoint = c.InstallDeployment()
				data, err = installctrlpanelc.BuildInstallDeploymentPayload(*installCtrlPanelInstallDeploymentBodyFlag)
			case "uninstall-deployment":
				endpoint = c.UninstallDeployment()
				data, err = installctrlpanelc.BuildUninstallDeploymentPayload(*installCtrlPanelUninstallDeploymentBodyFlag)
			case "update-deployment":
				endpoint = c.UpdateDeployment()
				data, err = installctrlpanelc.BuildUpdateDeploymentPayload(*installCtrlPanelUpdateDeploymentBodyFlag)
			}
		case "lpmonit":
			c := lpmonitc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add-script":
				endpoint = c.AddScript()
				data, err = lpmonitc.BuildAddScriptPayload(*lpmonitAddScriptBodyFlag)
			case "list-script":
				endpoint = c.ListScript()
				data = nil
			case "delete-script":
				endpoint = c.DeleteScript()
				data, err = lpmonitc.BuildDeleteScriptPayload(*lpmonitDeleteScriptBodyFlag)
			case "run-script":
				endpoint = c.RunScript()
				data, err = lpmonitc.BuildRunScriptPayload(*lpmonitRunScriptBodyFlag)
			case "run-result":
				endpoint = c.RunResult()
				data, err = lpmonitc.BuildRunResultPayload(*lpmonitRunResultBodyFlag)
			}
		case "order-center":
			c := ordercenterc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list":
				endpoint = c.List()
				data, err = ordercenterc.BuildListPayload(*orderCenterListBodyFlag)
			}
		case "lp-register":
			c := lpregisterc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "register-all":
				endpoint = c.RegisterAll()
				data = nil
			case "un-register-all":
				endpoint = c.UnRegisterAll()
				data = nil
			}
		case "relay-account":
			c := relayaccountc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-account":
				endpoint = c.ListAccount()
				data = nil
			case "register-account":
				endpoint = c.RegisterAccount()
				data, err = relayaccountc.BuildRegisterAccountPayload(*relayAccountRegisterAccountBodyFlag)
			case "delete-account":
				endpoint = c.DeleteAccount()
				data, err = relayaccountc.BuildDeleteAccountPayload(*relayAccountDeleteAccountBodyFlag)
			}
		case "relay-list":
			c := relaylistc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-relay":
				endpoint = c.ListRelay()
				data = nil
			}
		case "settings":
			c := settingsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "settings":
				endpoint = c.Settings()
				data, err = settingsc.BuildSettingsPayload(*settingsSettingsBodyFlag)
			}
		case "status-list":
			c := statuslistc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "stat-list":
				endpoint = c.StatList()
				data = nil
			}
		case "task-manager":
			c := taskmanagerc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "task-list":
				endpoint = c.TaskList()
				data = nil
			case "task-deploy":
				endpoint = c.TaskDeploy()
				data, err = taskmanagerc.BuildTaskDeployPayload(*taskManagerTaskDeployBodyFlag)
			case "un-deploy":
				endpoint = c.UnDeploy()
				data, err = taskmanagerc.BuildUnDeployPayload(*taskManagerUnDeployBodyFlag)
			case "task-create":
				endpoint = c.TaskCreate()
				data, err = taskmanagerc.BuildTaskCreatePayload(*taskManagerTaskCreateBodyFlag)
			}
		case "token-manager":
			c := tokenmanagerc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "token-list":
				endpoint = c.TokenList()
				data = nil
			case "token-create":
				endpoint = c.TokenCreate()
				data, err = tokenmanagerc.BuildTokenCreatePayload(*tokenManagerTokenCreateBodyFlag)
			case "token-delete":
				endpoint = c.TokenDelete()
				data, err = tokenmanagerc.BuildTokenDeletePayload(*tokenManagerTokenDeleteBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// main-logicUsage displays the usage of the main-logic command and its
// subcommands.
func mainLogicUsage() {
	fmt.Fprintf(os.Stderr, `Service is the mainLogic service interface.
Usage:
    %[1]s [globalflags] main-logic COMMAND [flags]

COMMAND:
    main-logic: MainLogic implements mainLogic.
    main-logic-link: MainLogicLink implements mainLogicLink.

Additional help:
    %[1]s main-logic COMMAND --help
`, os.Args[0])
}
func mainLogicMainLogicUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] main-logic main-logic

MainLogic implements mainLogic.

Example:
    %[1]s main-logic main-logic
`, os.Args[0])
}

func mainLogicMainLogicLinkUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] main-logic main-logic-link

MainLogicLink implements mainLogicLink.

Example:
    %[1]s main-logic main-logic-link
`, os.Args[0])
}

// account-cexUsage displays the usage of the account-cex command and its
// subcommands.
func accountCexUsage() {
	fmt.Fprintf(os.Stderr, `Service is the accountCex service interface.
Usage:
    %[1]s [globalflags] account-cex COMMAND [flags]

COMMAND:
    wallet-info: WalletInfo implements walletInfo.

Additional help:
    %[1]s account-cex COMMAND --help
`, os.Args[0])
}
func accountCexWalletInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account-cex wallet-info

WalletInfo implements walletInfo.

Example:
    %[1]s account-cex wallet-info
`, os.Args[0])
}

// account-dexUsage displays the usage of the account-dex command and its
// subcommands.
func accountDexUsage() {
	fmt.Fprintf(os.Stderr, `Service is the accountDex service interface.
Usage:
    %[1]s [globalflags] account-dex COMMAND [flags]

COMMAND:
    wallet-info: WalletInfo implements walletInfo.

Additional help:
    %[1]s account-dex COMMAND --help
`, os.Args[0])
}
func accountDexWalletInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] account-dex wallet-info -body JSON

WalletInfo implements walletInfo.
    -body JSON: 

Example:
    %[1]s account-dex wallet-info --body '{
      "chainId": 6418992234028039074
   }'
`, os.Args[0])
}

// amm-order-centerUsage displays the usage of the amm-order-center command and
// its subcommands.
func ammOrderCenterUsage() {
	fmt.Fprintf(os.Stderr, `used to manage amm order
Usage:
    %[1]s [globalflags] amm-order-center COMMAND [flags]

COMMAND:
    list: List implements list.

Additional help:
    %[1]s amm-order-center COMMAND --help
`, os.Args[0])
}
func ammOrderCenterListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] amm-order-center list -body JSON

List implements list.
    -body JSON: 

Example:
    %[1]s amm-order-center list --body '{
      "ammName": "Adipisci suscipit eum aliquam.",
      "page": 1600390740666236035,
      "pageSize": 6144641646432185358,
      "status": 6764355684817960098
   }'
`, os.Args[0])
}

// authentication-limiterUsage displays the usage of the authentication-limiter
// command and its subcommands.
func authenticationLimiterUsage() {
	fmt.Fprintf(os.Stderr, `used to manage ordercenter
Usage:
    %[1]s [globalflags] authentication-limiter COMMAND [flags]

COMMAND:
    get-authentication-limiter: used to query limiter information
    set-authentication-limiter: set limit information
    del-authentication-limiter: delete system limit information

Additional help:
    %[1]s authentication-limiter COMMAND --help
`, os.Args[0])
}
func authenticationLimiterGetAuthenticationLimiterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] authentication-limiter get-authentication-limiter

used to query limiter information

Example:
    %[1]s authentication-limiter get-authentication-limiter
`, os.Args[0])
}

func authenticationLimiterSetAuthenticationLimiterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] authentication-limiter set-authentication-limiter -body JSON

set limit information
    -body JSON: 

Example:
    %[1]s authentication-limiter set-authentication-limiter --body '{
      "authenticationLimiter": "Dolore non ullam et consequatur doloremque."
   }'
`, os.Args[0])
}

func authenticationLimiterDelAuthenticationLimiterUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] authentication-limiter del-authentication-limiter

delete system limit information

Example:
    %[1]s authentication-limiter del-authentication-limiter
`, os.Args[0])
}

// base-dataUsage displays the usage of the base-data command and its
// subcommands.
func baseDataUsage() {
	fmt.Fprintf(os.Stderr, `used to manage basic data
Usage:
    %[1]s [globalflags] base-data COMMAND [flags]

COMMAND:
    chain-data-list: used to return basic chain data
    get-lp-info: used to return basic chain data
    run-time-env: used to return runtime environment
    get-wallet-and-tokens: Get wallet list with their associated tokens

Additional help:
    %[1]s base-data COMMAND --help
`, os.Args[0])
}
func baseDataChainDataListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base-data chain-data-list

used to return basic chain data

Example:
    %[1]s base-data chain-data-list
`, os.Args[0])
}

func baseDataGetLpInfoUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base-data get-lp-info

used to return basic chain data

Example:
    %[1]s base-data get-lp-info
`, os.Args[0])
}

func baseDataRunTimeEnvUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base-data run-time-env

used to return runtime environment

Example:
    %[1]s base-data run-time-env
`, os.Args[0])
}

func baseDataGetWalletAndTokensUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] base-data get-wallet-and-tokens -body JSON

Get wallet list with their associated tokens
    -body JSON: 

Example:
    %[1]s base-data get-wallet-and-tokens --body '{
      "chainId": 5585753511314906542
   }'
`, os.Args[0])
}

// bridge-configUsage displays the usage of the bridge-config command and its
// subcommands.
func bridgeConfigUsage() {
	fmt.Fprintf(os.Stderr, `Service is the bridgeConfig service interface.
Usage:
    %[1]s [globalflags] bridge-config COMMAND [flags]

COMMAND:
    bridge-create: used to create cross-chain config
    bridge-list: BridgeList implements bridgeList.
    bridge-delete: BridgeDelete implements bridgeDelete.
    bridge-test: BridgeTest implements bridgeTest.

Additional help:
    %[1]s bridge-config COMMAND --help
`, os.Args[0])
}
func bridgeConfigBridgeCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bridge-config bridge-create -body JSON

used to create cross-chain config
    -body JSON: 

Example:
    %[1]s bridge-config bridge-create --body '{
      "ammName": "Explicabo sit cum accusamus reprehenderit totam saepe.",
      "bridgeName": "Voluptas consectetur vitae ut.",
      "dstChainId": "Enim ea magni fuga magni.",
      "dstTokenId": "Quia ea et ut.",
      "enableHedge": true,
      "enableLimiter": false,
      "relayApiKey": "Aut modi officia.",
      "relayUri": "Debitis quae voluptate illum.",
      "srcChainId": "Sed hic.",
      "srcTokenId": "Vitae corporis omnis.",
      "srcWalletId": "Est ipsa pariatur.",
      "walletId": "Voluptatem expedita quibusdam ut explicabo officiis."
   }'
`, os.Args[0])
}

func bridgeConfigBridgeListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bridge-config bridge-list

BridgeList implements bridgeList.

Example:
    %[1]s bridge-config bridge-list
`, os.Args[0])
}

func bridgeConfigBridgeDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bridge-config bridge-delete -body JSON

BridgeDelete implements bridgeDelete.
    -body JSON: 

Example:
    %[1]s bridge-config bridge-delete --body '{
      "id": "Vitae nulla harum perferendis."
   }'
`, os.Args[0])
}

func bridgeConfigBridgeTestUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] bridge-config bridge-test -body JSON

BridgeTest implements bridgeTest.
    -body JSON: 

Example:
    %[1]s bridge-config bridge-test --body '{
      "id": "Consequuntur ipsam dicta sunt molestias provident dolore."
   }'
`, os.Args[0])
}

// chain-configUsage displays the usage of the chain-config command and its
// subcommands.
func chainConfigUsage() {
	fmt.Fprintf(os.Stderr, `used to configure basic chain settings
Usage:
    %[1]s [globalflags] chain-config COMMAND [flags]

COMMAND:
    set-chain-list: SetChainList implements setChainList.
    del-chain-list: used to delete basic data for a chain
    chain-list: list chain and append chain service status, like client runtime status
    set-chain-gas-usd: SetChainGasUsd implements setChainGasUsd.
    set-chain-client-config: SetChainClientConfig implements setChainClientConfig.

Additional help:
    %[1]s chain-config COMMAND --help
`, os.Args[0])
}
func chainConfigSetChainListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chain-config set-chain-list -body JSON

SetChainList implements setChainList.
    -body JSON: 

Example:
    %[1]s chain-config set-chain-list --body '{
      "chainList": [
         {
            "chainId": 7348474596581095218,
            "chainName": "Itaque voluptatem maxime voluptatem.",
            "name": "Voluptatem occaecati neque qui in.",
            "tokenName": "Nam totam adipisci."
         },
         {
            "chainId": 7348474596581095218,
            "chainName": "Itaque voluptatem maxime voluptatem.",
            "name": "Voluptatem occaecati neque qui in.",
            "tokenName": "Nam totam adipisci."
         }
      ]
   }'
`, os.Args[0])
}

func chainConfigDelChainListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chain-config del-chain-list -body JSON

used to delete basic data for a chain
    -body JSON: 

Example:
    %[1]s chain-config del-chain-list --body '{
      "_id": "Sapiente qui sed odio ut ratione.",
      "chainId": 1008534645703636779
   }'
`, os.Args[0])
}

func chainConfigChainListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chain-config chain-list

list chain and append chain service status, like client runtime status

Example:
    %[1]s chain-config chain-list
`, os.Args[0])
}

func chainConfigSetChainGasUsdUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chain-config set-chain-gas-usd -body JSON

SetChainGasUsd implements setChainGasUsd.
    -body JSON: 

Example:
    %[1]s chain-config set-chain-gas-usd --body '{
      "_id": "Quod numquam accusamus deleniti cumque eum velit.",
      "chainId": 3733714128795416598,
      "usd": 1019364508561785870
   }'
`, os.Args[0])
}

func chainConfigSetChainClientConfigUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] chain-config set-chain-client-config -body JSON

SetChainClientConfig implements setChainClientConfig.
    -body JSON: 

Example:
    %[1]s chain-config set-chain-client-config --body '{
      "chainData": "Et facilis deleniti ea sit praesentium.",
      "chainId": 7571469164774561754
   }'
`, os.Args[0])
}

// config-resourceUsage displays the usage of the config-resource command and
// its subcommands.
func configResourceUsage() {
	fmt.Fprintf(os.Stderr, `Service is the configResource service interface.
Usage:
    %[1]s [globalflags] config-resource COMMAND [flags]

COMMAND:
    create-resource: CreateResource implements createResource.
    get-resource: GetResource implements getResource.
    list-resource: ListResource implements listResource.
    delete-result: DeleteResult implements deleteResult.
    edit-result: EditResult implements editResult.

Additional help:
    %[1]s config-resource COMMAND --help
`, os.Args[0])
}
func configResourceCreateResourceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] config-resource create-resource -body JSON

CreateResource implements createResource.
    -body JSON: 

Example:
    %[1]s config-resource create-resource --body '{
      "appName": "Pariatur eaque.",
      "clientId": "Nisi non dolore quidem.",
      "template": "Voluptas doloremque quasi.",
      "version": "Quidem officiis ipsam distinctio ducimus ipsum."
   }'
`, os.Args[0])
}

func configResourceGetResourceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] config-resource get-resource -body JSON

GetResource implements getResource.
    -body JSON: 

Example:
    %[1]s config-resource get-resource --body '{
      "clientId": "Repellendus aut vitae repellendus."
   }'
`, os.Args[0])
}

func configResourceListResourceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] config-resource list-resource

ListResource implements listResource.

Example:
    %[1]s config-resource list-resource
`, os.Args[0])
}

func configResourceDeleteResultUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] config-resource delete-result

DeleteResult implements deleteResult.

Example:
    %[1]s config-resource delete-result
`, os.Args[0])
}

func configResourceEditResultUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] config-resource edit-result -body JSON

EditResult implements editResult.
    -body JSON: 

Example:
    %[1]s config-resource edit-result --body '{
      "appName": "Eius consequuntur porro.",
      "clientId": "Repellat molestiae ut odio pariatur.",
      "template": "Rerum sed dolores dolorem.",
      "templateResult": "Reprehenderit unde porro quam aliquid suscipit quia.",
      "version": "Culpa omnis sunt autem.",
      "versionHash": "Sequi temporibus tempora assumenda."
   }'
`, os.Args[0])
}

// dex-walletUsage displays the usage of the dex-wallet command and its
// subcommands.
func dexWalletUsage() {
	fmt.Fprintf(os.Stderr, `used to manage wallets
Usage:
    %[1]s [globalflags] dex-wallet COMMAND [flags]

COMMAND:
    list-dex-wallet: ListDexWallet implements listDexWallet.
    create-dex-wallet: CreateDexWallet implements createDexWallet.
    delete-dex-wallet: DeleteDexWallet implements deleteDexWallet.
    vault-list: VaultList implements vaultList.
    update-lp-wallet: UpdateLpWallet implements updateLpWallet.

Additional help:
    %[1]s dex-wallet COMMAND --help
`, os.Args[0])
}
func dexWalletListDexWalletUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dex-wallet list-dex-wallet

ListDexWallet implements listDexWallet.

Example:
    %[1]s dex-wallet list-dex-wallet
`, os.Args[0])
}

func dexWalletCreateDexWalletUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dex-wallet create-dex-wallet -body JSON

CreateDexWallet implements createDexWallet.
    -body JSON: 

Example:
    %[1]s dex-wallet create-dex-wallet --body '{
      "accountId": "Voluptas et.",
      "address": "Excepturi qui explicabo sit expedita fugit.",
      "chainId": 7078845938374597277,
      "chainType": "Qui quisquam illum non aut quaerat.",
      "id": "Et vel dolor aut adipisci cupiditate.",
      "privateKey": "Corrupti veritatis.",
      "signServiceEndpoint": "Inventore voluptas officiis sed voluptates recusandae.",
      "storeId": "A nulla ipsa.",
      "vaultHostType": "Reprehenderit aut.",
      "vaultName": "Repellat laudantium iure impedit nesciunt ut rerum.",
      "vaultSecertType": "Aut et iusto voluptatem debitis earum voluptatem.",
      "walletName": "Sint exercitationem quas debitis.",
      "walletType": "storeId"
   }'
`, os.Args[0])
}

func dexWalletDeleteDexWalletUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dex-wallet delete-dex-wallet -body JSON

DeleteDexWallet implements deleteDexWallet.
    -body JSON: 

Example:
    %[1]s dex-wallet delete-dex-wallet --body '{
      "id": "Aut rerum repellendus."
   }'
`, os.Args[0])
}

func dexWalletVaultListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dex-wallet vault-list

VaultList implements vaultList.

Example:
    %[1]s dex-wallet vault-list
`, os.Args[0])
}

func dexWalletUpdateLpWalletUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] dex-wallet update-lp-wallet

UpdateLpWallet implements updateLpWallet.

Example:
    %[1]s dex-wallet update-lp-wallet
`, os.Args[0])
}

// hedgeUsage displays the usage of the hedge command and its subcommands.
func hedgeUsage() {
	fmt.Fprintf(os.Stderr, `hedge basic configuration
Usage:
    %[1]s [globalflags] hedge COMMAND [flags]

COMMAND:
    list: List implements list.
    edit: Edit implements edit.
    del: Del implements del.

Additional help:
    %[1]s hedge COMMAND --help
`, os.Args[0])
}
func hedgeListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hedge list

List implements list.

Example:
    %[1]s hedge list
`, os.Args[0])
}

func hedgeEditUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hedge edit -body JSON

Edit implements edit.
    -body JSON: 

Example:
    %[1]s hedge edit --body '{
      "hedge": {
         "hedgeType": "Veniam sint neque quia esse fugit.",
         "id": "Perferendis ut unde voluptatibus."
      }
   }'
`, os.Args[0])
}

func hedgeDelUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] hedge del -body JSON

Del implements del.
    -body JSON: 

Example:
    %[1]s hedge del --body '{
      "id": "Aliquam vel dolorem deleniti magnam et."
   }'
`, os.Args[0])
}

// install-ctrl-panelUsage displays the usage of the install-ctrl-panel command
// and its subcommands.
func installCtrlPanelUsage() {
	fmt.Fprintf(os.Stderr, `used to control install and startup of nodes
Usage:
    %[1]s [globalflags] install-ctrl-panel COMMAND [flags]

COMMAND:
    list-install: ListInstall implements listInstall.
    install-lp-client: InstallLpClient implements installLpClient.
    uninstall-lp-client: UninstallLpClient implements uninstallLpClient.
    install-deployment: InstallDeployment implements installDeployment.
    uninstall-deployment: UninstallDeployment implements uninstallDeployment.
    update-deployment: UpdateDeployment implements updateDeployment.

Additional help:
    %[1]s install-ctrl-panel COMMAND --help
`, os.Args[0])
}
func installCtrlPanelListInstallUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] install-ctrl-panel list-install -body JSON

ListInstall implements listInstall.
    -body JSON: 

Example:
    %[1]s install-ctrl-panel list-install --body '{
      "installType": "Nisi officia laboriosam saepe voluptatum aliquid voluptas."
   }'
`, os.Args[0])
}

func installCtrlPanelInstallLpClientUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] install-ctrl-panel install-lp-client -body JSON

InstallLpClient implements installLpClient.
    -body JSON: 

Example:
    %[1]s install-ctrl-panel install-lp-client --body '{
      "setupConfig": {
         "awsAccessKeyId": "Illo porro beatae et aut facere.",
         "awsSecretAccessKey": "Exercitationem ab labore maiores odit porro.",
         "connectionExplorerurl": "Ex sunt quidem dolores est.",
         "connectionHelperurl": "Totam voluptatem.",
         "connectionNodeurl": "Atque dolorem occaecati suscipit consectetur.",
         "connectionWalleturl": "Esse dolores repellendus laboriosam harum.",
         "containerPort": "Ut necessitatibus impedit blanditiis.",
         "customEnv": [
            {
               "key": "Itaque et quasi est.",
               "value": "Est quam vel modi."
            },
            {
               "key": "Itaque et quasi est.",
               "value": "Est quam vel modi."
            },
            {
               "key": "Itaque et quasi est.",
               "value": "Est quam vel modi."
            },
            {
               "key": "Itaque et quasi est.",
               "value": "Est quam vel modi."
            }
         ],
         "deploymentName": "Eos earum eveniet adipisci quibusdam nihil.",
         "imageRepository": "Aliquid quibusdam deserunt aut.",
         "install": false,
         "rpcUrl": "Sunt quam illo laboriosam aperiam pariatur.",
         "serviceName": "Incidunt eos est ipsa aut ratione eum.",
         "startBlock": "Repudiandae incidunt.",
         "type": "Itaque et quo."
      }
   }'
`, os.Args[0])
}

func installCtrlPanelUninstallLpClientUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] install-ctrl-panel uninstall-lp-client -body JSON

UninstallLpClient implements uninstallLpClient.
    -body JSON: 

Example:
    %[1]s install-ctrl-panel uninstall-lp-client --body '{
      "setupConfig": {
         "type": "Soluta molestias voluptatem sequi nostrum.",
         "uninstall": false
      }
   }'
`, os.Args[0])
}

func installCtrlPanelInstallDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] install-ctrl-panel install-deployment -body JSON

InstallDeployment implements installDeployment.
    -body JSON: 

Example:
    %[1]s install-ctrl-panel install-deployment --body '{
      "setupConfig": {
         "containerPort": "Fugiat et quas incidunt fugit voluptatem eius.",
         "customEnv": [
            {
               "key": "Itaque et quasi est.",
               "value": "Est quam vel modi."
            },
            {
               "key": "Itaque et quasi est.",
               "value": "Est quam vel modi."
            }
         ],
         "imageRepository": "Corporis voluptas.",
         "install": false,
         "installType": "amm",
         "name": "Et fuga veritatis commodi accusantium corrupti."
      }
   }'
`, os.Args[0])
}

func installCtrlPanelUninstallDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] install-ctrl-panel uninstall-deployment -body JSON

UninstallDeployment implements uninstallDeployment.
    -body JSON: 

Example:
    %[1]s install-ctrl-panel uninstall-deployment --body '{
      "setupConfig": {
         "installType": "Est eos molestias dolor eum consequuntur saepe.",
         "name": "Laborum illum maxime et.",
         "uninstall": true
      }
   }'
`, os.Args[0])
}

func installCtrlPanelUpdateDeploymentUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] install-ctrl-panel update-deployment -body JSON

UpdateDeployment implements updateDeployment.
    -body JSON: 

Example:
    %[1]s install-ctrl-panel update-deployment --body '{
      "setupConfig": {
         "installContext": "Nemo fuga consequuntur fugiat id beatae.",
         "installType": "Voluptatum neque animi odio.",
         "name": "Atque qui nobis adipisci nesciunt provident.",
         "update": true
      }
   }'
`, os.Args[0])
}

// lpmonitUsage displays the usage of the lpmonit command and its subcommands.
func lpmonitUsage() {
	fmt.Fprintf(os.Stderr, `monitor script
Usage:
    %[1]s [globalflags] lpmonit COMMAND [flags]

COMMAND:
    add-script: add script and save
    list-script: task_list
    delete-script: task_list_delete
    run-script: task_run
    run-result: run_result

Additional help:
    %[1]s lpmonit COMMAND --help
`, os.Args[0])
}
func lpmonitAddScriptUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] lpmonit add-script -body JSON

add script and save
    -body JSON: 

Example:
    %[1]s lpmonit add-script --body '{
      "cron": "Nihil fugit et nesciunt est dolores a.",
      "name": "Accusamus et.",
      "scriptBody": "Et iure vel voluptatum excepturi."
   }'
`, os.Args[0])
}

func lpmonitListScriptUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] lpmonit list-script

task_list

Example:
    %[1]s lpmonit list-script
`, os.Args[0])
}

func lpmonitDeleteScriptUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] lpmonit delete-script -body JSON

task_list_delete
    -body JSON: 

Example:
    %[1]s lpmonit delete-script --body '{
      "_id": "Temporibus officia."
   }'
`, os.Args[0])
}

func lpmonitRunScriptUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] lpmonit run-script -body JSON

task_run
    -body JSON: 

Example:
    %[1]s lpmonit run-script --body '{
      "scriptContent": "Eaque excepturi."
   }'
`, os.Args[0])
}

func lpmonitRunResultUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] lpmonit run-result -body JSON

run_result
    -body JSON: 

Example:
    %[1]s lpmonit run-result --body '{
      "scriptName": "Et dolor dignissimos."
   }'
`, os.Args[0])
}

// order-centerUsage displays the usage of the order-center command and its
// subcommands.
func orderCenterUsage() {
	fmt.Fprintf(os.Stderr, `used to manage order
Usage:
    %[1]s [globalflags] order-center COMMAND [flags]

COMMAND:
    list: List implements list.

Additional help:
    %[1]s order-center COMMAND --help
`, os.Args[0])
}
func orderCenterListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] order-center list -body JSON

List implements list.
    -body JSON: 

Example:
    %[1]s order-center list --body '{
      "page": 5841001857259909626,
      "pageSize": 6532877236707412271,
      "status": 6933439399695667301
   }'
`, os.Args[0])
}

// lp-registerUsage displays the usage of the lp-register command and its
// subcommands.
func lpRegisterUsage() {
	fmt.Fprintf(os.Stderr, `used to manage lp to client registration
Usage:
    %[1]s [globalflags] lp-register COMMAND [flags]

COMMAND:
    register-all: RegisterAll implements registerAll.
    un-register-all: UnRegisterAll implements unRegisterAll.

Additional help:
    %[1]s lp-register COMMAND --help
`, os.Args[0])
}
func lpRegisterRegisterAllUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] lp-register register-all

RegisterAll implements registerAll.

Example:
    %[1]s lp-register register-all
`, os.Args[0])
}

func lpRegisterUnRegisterAllUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] lp-register un-register-all

UnRegisterAll implements unRegisterAll.

Example:
    %[1]s lp-register un-register-all
`, os.Args[0])
}

// relay-accountUsage displays the usage of the relay-account command and its
// subcommands.
func relayAccountUsage() {
	fmt.Fprintf(os.Stderr, `used to manage lp account on relay
Usage:
    %[1]s [globalflags] relay-account COMMAND [flags]

COMMAND:
    list-account: ListAccount implements listAccount.
    register-account: RegisterAccount implements registerAccount.
    delete-account: DeleteAccount implements deleteAccount.

Additional help:
    %[1]s relay-account COMMAND --help
`, os.Args[0])
}
func relayAccountListAccountUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] relay-account list-account

ListAccount implements listAccount.

Example:
    %[1]s relay-account list-account
`, os.Args[0])
}

func relayAccountRegisterAccountUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] relay-account register-account -body JSON

RegisterAccount implements registerAccount.
    -body JSON: 

Example:
    %[1]s relay-account register-account --body '{
      "profile": "Praesentium voluptatem et eum sed aut eius.",
      "relayUrl": "Velit adipisci perferendis."
   }'
`, os.Args[0])
}

func relayAccountDeleteAccountUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] relay-account delete-account -body JSON

DeleteAccount implements deleteAccount.
    -body JSON: 

Example:
    %[1]s relay-account delete-account --body '{
      "id": "Et nobis earum voluptas est."
   }'
`, os.Args[0])
}

// relay-listUsage displays the usage of the relay-list command and its
// subcommands.
func relayListUsage() {
	fmt.Fprintf(os.Stderr, `used to manage lp account on relay
Usage:
    %[1]s [globalflags] relay-list COMMAND [flags]

COMMAND:
    list-relay: ListRelay implements listRelay.

Additional help:
    %[1]s relay-list COMMAND --help
`, os.Args[0])
}
func relayListListRelayUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] relay-list list-relay

ListRelay implements listRelay.

Example:
    %[1]s relay-list list-relay
`, os.Args[0])
}

// settingsUsage displays the usage of the settings command and its subcommands.
func settingsUsage() {
	fmt.Fprintf(os.Stderr, `used to manage order
Usage:
    %[1]s [globalflags] settings COMMAND [flags]

COMMAND:
    settings: Settings implements settings.

Additional help:
    %[1]s settings COMMAND --help
`, os.Args[0])
}
func settingsSettingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] settings settings -body JSON

Settings implements settings.
    -body JSON: 

Example:
    %[1]s settings settings --body '{
      "relayUri": "Libero sunt temporibus ex sint accusantium."
   }'
`, os.Args[0])
}

// status-listUsage displays the usage of the status-list command and its
// subcommands.
func statusListUsage() {
	fmt.Fprintf(os.Stderr, `used to manage install status
Usage:
    %[1]s [globalflags] status-list COMMAND [flags]

COMMAND:
    stat-list: StatList implements statList.

Additional help:
    %[1]s status-list COMMAND --help
`, os.Args[0])
}
func statusListStatListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] status-list stat-list

StatList implements statList.

Example:
    %[1]s status-list stat-list
`, os.Args[0])
}

// task-managerUsage displays the usage of the task-manager command and its
// subcommands.
func taskManagerUsage() {
	fmt.Fprintf(os.Stderr, `Service is the taskManager service interface.
Usage:
    %[1]s [globalflags] task-manager COMMAND [flags]

COMMAND:
    task-list: TaskList implements taskList.
    task-deploy: TaskDeploy implements taskDeploy.
    un-deploy: UnDeploy implements unDeploy.
    task-create: TaskCreate implements taskCreate.

Additional help:
    %[1]s task-manager COMMAND --help
`, os.Args[0])
}
func taskManagerTaskListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task-manager task-list

TaskList implements taskList.

Example:
    %[1]s task-manager task-list
`, os.Args[0])
}

func taskManagerTaskDeployUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task-manager task-deploy -body JSON

TaskDeploy implements taskDeploy.
    -body JSON: 

Example:
    %[1]s task-manager task-deploy --body '{
      "_id": "Blanditiis vel fugiat quisquam."
   }'
`, os.Args[0])
}

func taskManagerUnDeployUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task-manager un-deploy -body JSON

UnDeploy implements unDeploy.
    -body JSON: 

Example:
    %[1]s task-manager un-deploy --body '{
      "_id": "Omnis quisquam rem asperiores aspernatur culpa."
   }'
`, os.Args[0])
}

func taskManagerTaskCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] task-manager task-create -body JSON

TaskCreate implements taskCreate.
    -body JSON: 

Example:
    %[1]s task-manager task-create --body '{
      "_id": "A nihil ut fugiat deleniti.",
      "deployMessage": "Dolor dolor eius voluptatibus reprehenderit dolorem et.",
      "deployed": false,
      "schedule": "A non modi dolore.",
      "scriptBody": "Ea optio.",
      "scriptPath": "Enim fugit fuga accusantium laborum ea quaerat.",
      "taskType": "customize"
   }'
`, os.Args[0])
}

// token-managerUsage displays the usage of the token-manager command and its
// subcommands.
func tokenManagerUsage() {
	fmt.Fprintf(os.Stderr, `used to manage all tokens
Usage:
    %[1]s [globalflags] token-manager COMMAND [flags]

COMMAND:
    token-list: TokenList implements tokenList.
    token-create: TokenCreate implements tokenCreate.
    token-delete: TokenDelete implements tokenDelete.

Additional help:
    %[1]s token-manager COMMAND --help
`, os.Args[0])
}
func tokenManagerTokenListUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] token-manager token-list

TokenList implements tokenList.

Example:
    %[1]s token-manager token-list
`, os.Args[0])
}

func tokenManagerTokenCreateUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] token-manager token-create -body JSON

TokenCreate implements tokenCreate.
    -body JSON: 

Example:
    %[1]s token-manager token-create --body '{
      "_id": "Quae velit incidunt sit.",
      "address": "Est harum deserunt quo similique molestias in.",
      "chainId": 6903460931663968518,
      "chainType": "Alias sapiente explicabo.",
      "coinType": "stable_coin",
      "marketName": "Eos officiis.",
      "precision": 10,
      "tokenId": "Error qui sit blanditiis impedit voluptatem necessitatibus.",
      "tokenName": "Veritatis omnis."
   }'
`, os.Args[0])
}

func tokenManagerTokenDeleteUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] token-manager token-delete -body JSON

TokenDelete implements tokenDelete.
    -body JSON: 

Example:
    %[1]s token-manager token-delete --body '{
      "_id": "Non nihil."
   }'
`, os.Args[0])
}
